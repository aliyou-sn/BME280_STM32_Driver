
BME_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  080054bc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080054bc  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b23c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a84  00000000  00000000  0002b30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002cd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079a  00000000  00000000  0002d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002184e  00000000  00000000  0002deda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8cb  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caadf  00000000  00000000  0005cff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e6c  00000000  00000000  00127ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080053b8 	.word	0x080053b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080053b8 	.word	0x080053b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_ldivmod>:
 8000afc:	b97b      	cbnz	r3, 8000b1e <__aeabi_ldivmod+0x22>
 8000afe:	b972      	cbnz	r2, 8000b1e <__aeabi_ldivmod+0x22>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bfbe      	ittt	lt
 8000b04:	2000      	movlt	r0, #0
 8000b06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b0a:	e006      	blt.n	8000b1a <__aeabi_ldivmod+0x1e>
 8000b0c:	bf08      	it	eq
 8000b0e:	2800      	cmpeq	r0, #0
 8000b10:	bf1c      	itt	ne
 8000b12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b16:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b1a:	f000 b9bb 	b.w	8000e94 <__aeabi_idiv0>
 8000b1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b26:	2900      	cmp	r1, #0
 8000b28:	db09      	blt.n	8000b3e <__aeabi_ldivmod+0x42>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db1a      	blt.n	8000b64 <__aeabi_ldivmod+0x68>
 8000b2e:	f000 f84d 	bl	8000bcc <__udivmoddi4>
 8000b32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3a:	b004      	add	sp, #16
 8000b3c:	4770      	bx	lr
 8000b3e:	4240      	negs	r0, r0
 8000b40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db1b      	blt.n	8000b80 <__aeabi_ldivmod+0x84>
 8000b48:	f000 f840 	bl	8000bcc <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4240      	negs	r0, r0
 8000b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5c:	4252      	negs	r2, r2
 8000b5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b62:	4770      	bx	lr
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	f000 f82f 	bl	8000bcc <__udivmoddi4>
 8000b6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b76:	b004      	add	sp, #16
 8000b78:	4240      	negs	r0, r0
 8000b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7e:	4770      	bx	lr
 8000b80:	4252      	negs	r2, r2
 8000b82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b86:	f000 f821 	bl	8000bcc <__udivmoddi4>
 8000b8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b92:	b004      	add	sp, #16
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2319      	movs	r3, #25
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2288      	movs	r2, #136	; 0x88
 8000eb0:	21ec      	movs	r1, #236	; 0xec
 8000eb2:	4857      	ldr	r0, [pc, #348]	; (8001010 <TrimRead+0x178>)
 8000eb4:	f001 feb0 	bl	8002c18 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	3319      	adds	r3, #25
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	9202      	str	r2, [sp, #8]
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	9201      	str	r2, [sp, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	22e1      	movs	r2, #225	; 0xe1
 8000ecc:	21ec      	movs	r1, #236	; 0xec
 8000ece:	4850      	ldr	r0, [pc, #320]	; (8001010 <TrimRead+0x178>)
 8000ed0:	f001 fea2 	bl	8002c18 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	783b      	ldrb	r3, [r7, #0]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <TrimRead+0x17c>)
 8000ee6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4b48      	ldr	r3, [pc, #288]	; (8001018 <TrimRead+0x180>)
 8000ef8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000efa:	797b      	ldrb	r3, [r7, #5]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <TrimRead+0x184>)
 8000f0a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <TrimRead+0x188>)
 8000f1e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000f20:	7a7b      	ldrb	r3, [r7, #9]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <TrimRead+0x18c>)
 8000f30:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7abb      	ldrb	r3, [r7, #10]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <TrimRead+0x190>)
 8000f42:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <TrimRead+0x194>)
 8000f54:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <TrimRead+0x198>)
 8000f66:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000f68:	7c7b      	ldrb	r3, [r7, #17]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	7c3b      	ldrb	r3, [r7, #16]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <TrimRead+0x19c>)
 8000f78:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000f7a:	7cfb      	ldrb	r3, [r7, #19]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	7cbb      	ldrb	r3, [r7, #18]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <TrimRead+0x1a0>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000f8c:	7d7b      	ldrb	r3, [r7, #21]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	7d3b      	ldrb	r3, [r7, #20]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <TrimRead+0x1a4>)
 8000f9c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <TrimRead+0x1a8>)
 8000fae:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000fb0:	7e3b      	ldrb	r3, [r7, #24]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <TrimRead+0x1ac>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000fb8:	7ebb      	ldrb	r3, [r7, #26]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7e7b      	ldrb	r3, [r7, #25]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <TrimRead+0x1b0>)
 8000fc8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000fca:	7efb      	ldrb	r3, [r7, #27]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <TrimRead+0x1b4>)
 8000fd0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000fd2:	7f3b      	ldrb	r3, [r7, #28]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <TrimRead+0x1b8>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000fea:	7fbb      	ldrb	r3, [r7, #30]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	7f7b      	ldrb	r3, [r7, #29]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <TrimRead+0x1bc>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <TrimRead+0x1c0>)
 8001006:	801a      	strh	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000b0 	.word	0x200000b0
 8001014:	20000088 	.word	0x20000088
 8001018:	20000090 	.word	0x20000090
 800101c:	20000092 	.word	0x20000092
 8001020:	2000008a 	.word	0x2000008a
 8001024:	20000094 	.word	0x20000094
 8001028:	20000096 	.word	0x20000096
 800102c:	20000098 	.word	0x20000098
 8001030:	2000009a 	.word	0x2000009a
 8001034:	2000009c 	.word	0x2000009c
 8001038:	2000009e 	.word	0x2000009e
 800103c:	200000a0 	.word	0x200000a0
 8001040:	200000a2 	.word	0x200000a2
 8001044:	2000008c 	.word	0x2000008c
 8001048:	200000a4 	.word	0x200000a4
 800104c:	2000008e 	.word	0x2000008e
 8001050:	200000a6 	.word	0x200000a6
 8001054:	200000a8 	.word	0x200000a8
 8001058:	200000aa 	.word	0x200000aa

0800105c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af04      	add	r7, sp, #16
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800107a:	f7ff ff0d 	bl	8000e98 <TrimRead>


	uint8_t datatowrite = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001086:	23b6      	movs	r3, #182	; 0xb6
 8001088:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 030f 	add.w	r3, r7, #15
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	22e0      	movs	r2, #224	; 0xe0
 800109e:	21ec      	movs	r1, #236	; 0xec
 80010a0:	4858      	ldr	r0, [pc, #352]	; (8001204 <BME280_Config+0x1a8>)
 80010a2:	f001 fcbf 	bl	8002a24 <HAL_I2C_Mem_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <BME280_Config+0x56>
	{
		return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b0:	e0a3      	b.n	80011fa <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f001 f8ba 	bl	800222c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	22f2      	movs	r2, #242	; 0xf2
 80010d0:	21ec      	movs	r1, #236	; 0xec
 80010d2:	484c      	ldr	r0, [pc, #304]	; (8001204 <BME280_Config+0x1a8>)
 80010d4:	f001 fca6 	bl	8002a24 <HAL_I2C_Mem_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <BME280_Config+0x88>
	{
		return -1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e2:	e08a      	b.n	80011fa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f001 f8a1 	bl	800222c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f107 030e 	add.w	r3, r7, #14
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	22f2      	movs	r2, #242	; 0xf2
 80010fe:	21ec      	movs	r1, #236	; 0xec
 8001100:	4840      	ldr	r0, [pc, #256]	; (8001204 <BME280_Config+0x1a8>)
 8001102:	f001 fd89 	bl	8002c18 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001106:	7bba      	ldrb	r2, [r7, #14]
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	429a      	cmp	r2, r3
 800110c:	d002      	beq.n	8001114 <BME280_Config+0xb8>
	{
		return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	e072      	b.n	80011fa <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001118:	015b      	lsls	r3, r3, #5
 800111a:	b25a      	sxtb	r2, r3
 800111c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b25b      	sxtb	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f107 030f 	add.w	r3, r7, #15
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22f5      	movs	r2, #245	; 0xf5
 8001140:	21ec      	movs	r1, #236	; 0xec
 8001142:	4830      	ldr	r0, [pc, #192]	; (8001204 <BME280_Config+0x1a8>)
 8001144:	f001 fc6e 	bl	8002a24 <HAL_I2C_Mem_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <BME280_Config+0xf8>
	{
		return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001152:	e052      	b.n	80011fa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f001 f869 	bl	800222c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2301      	movs	r3, #1
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f107 030e 	add.w	r3, r7, #14
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	22f5      	movs	r2, #245	; 0xf5
 800116e:	21ec      	movs	r1, #236	; 0xec
 8001170:	4824      	ldr	r0, [pc, #144]	; (8001204 <BME280_Config+0x1a8>)
 8001172:	f001 fd51 	bl	8002c18 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001176:	7bba      	ldrb	r2, [r7, #14]
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	429a      	cmp	r2, r3
 800117c:	d002      	beq.n	8001184 <BME280_Config+0x128>
	{
		return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	e03a      	b.n	80011fa <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	b25a      	sxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b25a      	sxtb	r2, r3
 8001194:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	b25b      	sxtb	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f107 030f 	add.w	r3, r7, #15
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	22f4      	movs	r2, #244	; 0xf4
 80011b4:	21ec      	movs	r1, #236	; 0xec
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <BME280_Config+0x1a8>)
 80011b8:	f001 fc34 	bl	8002a24 <HAL_I2C_Mem_Write>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <BME280_Config+0x16c>
	{
		return -1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c6:	e018      	b.n	80011fa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f001 f82f 	bl	800222c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	22f4      	movs	r2, #244	; 0xf4
 80011e2:	21ec      	movs	r1, #236	; 0xec
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <BME280_Config+0x1a8>)
 80011e6:	f001 fd17 	bl	8002c18 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011ea:	7bba      	ldrb	r2, [r7, #14]
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d002      	beq.n	80011f8 <BME280_Config+0x19c>
	{
		return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f6:	e000      	b.n	80011fa <BME280_Config+0x19e>
	}

	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	200000b0 	.word	0x200000b0

08001208 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <BMEReadRaw+0x8c>)
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	22d0      	movs	r2, #208	; 0xd0
 8001220:	21ec      	movs	r1, #236	; 0xec
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <BMEReadRaw+0x90>)
 8001224:	f001 fcf8 	bl	8002c18 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <BMEReadRaw+0x8c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b60      	cmp	r3, #96	; 0x60
 800122e:	d12a      	bne.n	8001286 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2308      	movs	r3, #8
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	463b      	mov	r3, r7
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	22f7      	movs	r2, #247	; 0xf7
 8001242:	21ec      	movs	r1, #236	; 0xec
 8001244:	4814      	ldr	r0, [pc, #80]	; (8001298 <BMEReadRaw+0x90>)
 8001246:	f001 fce7 	bl	8002c18 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800124a:	783b      	ldrb	r3, [r7, #0]
 800124c:	031a      	lsls	r2, r3, #12
 800124e:	787b      	ldrb	r3, [r7, #1]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4313      	orrs	r3, r2
 8001254:	78ba      	ldrb	r2, [r7, #2]
 8001256:	0912      	lsrs	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	4313      	orrs	r3, r2
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <BMEReadRaw+0x94>)
 800125e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	031a      	lsls	r2, r3, #12
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4313      	orrs	r3, r2
 800126a:	797a      	ldrb	r2, [r7, #5]
 800126c:	0912      	lsrs	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	4313      	orrs	r3, r2
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <BMEReadRaw+0x98>)
 8001274:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4313      	orrs	r3, r2
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <BMEReadRaw+0x9c>)
 8001280:	6013      	str	r3, [r2, #0]

		return 0;
 8001282:	2300      	movs	r3, #0
 8001284:	e001      	b.n	800128a <BMEReadRaw+0x82>
	}

	else return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000078 	.word	0x20000078
 8001298:	200000b0 	.word	0x200000b0
 800129c:	20000080 	.word	0x20000080
 80012a0:	2000007c 	.word	0x2000007c
 80012a4:	20000084 	.word	0x20000084

080012a8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	10da      	asrs	r2, r3, #3
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <BME280_compensate_T_int32+0x74>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <BME280_compensate_T_int32+0x78>)
 80012be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	12db      	asrs	r3, r3, #11
 80012c8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	111b      	asrs	r3, r3, #4
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <BME280_compensate_T_int32+0x74>)
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	1112      	asrs	r2, r2, #4
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <BME280_compensate_T_int32+0x74>)
 80012da:	8809      	ldrh	r1, [r1, #0]
 80012dc:	1a52      	subs	r2, r2, r1
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	131b      	asrs	r3, r3, #12
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <BME280_compensate_T_int32+0x7c>)
 80012e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	139b      	asrs	r3, r3, #14
 80012f0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <BME280_compensate_T_int32+0x80>)
 80012fa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <BME280_compensate_T_int32+0x80>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3380      	adds	r3, #128	; 0x80
 8001308:	121b      	asrs	r3, r3, #8
 800130a:	60fb      	str	r3, [r7, #12]
	return T;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000088 	.word	0x20000088
 8001320:	20000090 	.word	0x20000090
 8001324:	20000092 	.word	0x20000092
 8001328:	200000ac 	.word	0x200000ac

0800132c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800132c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001330:	b0ca      	sub	sp, #296	; 0x128
 8001332:	af00      	add	r7, sp, #0
 8001334:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001338:	4baf      	ldr	r3, [pc, #700]	; (80015f8 <BME280_compensate_P_int64+0x2cc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	17da      	asrs	r2, r3, #31
 800133e:	461c      	mov	r4, r3
 8001340:	4615      	mov	r5, r2
 8001342:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001346:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800134a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800134e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001352:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001356:	fb03 f102 	mul.w	r1, r3, r2
 800135a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800135e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	18ca      	adds	r2, r1, r3
 8001368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800136c:	fba3 8903 	umull	r8, r9, r3, r3
 8001370:	eb02 0309 	add.w	r3, r2, r9
 8001374:	4699      	mov	r9, r3
 8001376:	4ba1      	ldr	r3, [pc, #644]	; (80015fc <BME280_compensate_P_int64+0x2d0>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	b21b      	sxth	r3, r3
 800137e:	17da      	asrs	r2, r3, #31
 8001380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001388:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800138c:	4603      	mov	r3, r0
 800138e:	fb03 f209 	mul.w	r2, r3, r9
 8001392:	460b      	mov	r3, r1
 8001394:	fb08 f303 	mul.w	r3, r8, r3
 8001398:	4413      	add	r3, r2
 800139a:	4602      	mov	r2, r0
 800139c:	fba8 1202 	umull	r1, r2, r8, r2
 80013a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013a4:	460a      	mov	r2, r1
 80013a6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80013aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013ae:	4413      	add	r3, r2
 80013b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80013b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80013bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <BME280_compensate_P_int64+0x2d4>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	17da      	asrs	r2, r3, #31
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013ce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80013d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80013da:	462a      	mov	r2, r5
 80013dc:	fb02 f203 	mul.w	r2, r2, r3
 80013e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013e4:	4621      	mov	r1, r4
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	441a      	add	r2, r3
 80013ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013f0:	4621      	mov	r1, r4
 80013f2:	fba3 1301 	umull	r1, r3, r3, r1
 80013f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013fa:	460b      	mov	r3, r1
 80013fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001404:	18d3      	adds	r3, r2, r3
 8001406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800140a:	f04f 0000 	mov.w	r0, #0
 800140e:	f04f 0100 	mov.w	r1, #0
 8001412:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001416:	462b      	mov	r3, r5
 8001418:	0459      	lsls	r1, r3, #17
 800141a:	4623      	mov	r3, r4
 800141c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001420:	4623      	mov	r3, r4
 8001422:	0458      	lsls	r0, r3, #17
 8001424:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001428:	1814      	adds	r4, r2, r0
 800142a:	643c      	str	r4, [r7, #64]	; 0x40
 800142c:	414b      	adcs	r3, r1
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
 8001430:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001434:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001438:	4b72      	ldr	r3, [pc, #456]	; (8001604 <BME280_compensate_P_int64+0x2d8>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	b21b      	sxth	r3, r3
 8001440:	17da      	asrs	r2, r3, #31
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001446:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800144a:	f04f 0000 	mov.w	r0, #0
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001456:	00d9      	lsls	r1, r3, #3
 8001458:	2000      	movs	r0, #0
 800145a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800145e:	1814      	adds	r4, r2, r0
 8001460:	63bc      	str	r4, [r7, #56]	; 0x38
 8001462:	414b      	adcs	r3, r1
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001466:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800146a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800146e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001476:	fb03 f102 	mul.w	r1, r3, r2
 800147a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800147e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	18ca      	adds	r2, r1, r3
 8001488:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800148c:	fba3 1303 	umull	r1, r3, r3, r3
 8001490:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001494:	460b      	mov	r3, r1
 8001496:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800149a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014a4:	4b58      	ldr	r3, [pc, #352]	; (8001608 <BME280_compensate_P_int64+0x2dc>)
 80014a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	17da      	asrs	r2, r3, #31
 80014ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80014b6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80014ba:	462b      	mov	r3, r5
 80014bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80014c0:	4642      	mov	r2, r8
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	464b      	mov	r3, r9
 80014c8:	4621      	mov	r1, r4
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	4622      	mov	r2, r4
 80014d2:	4641      	mov	r1, r8
 80014d4:	fba2 1201 	umull	r1, r2, r2, r1
 80014d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80014dc:	460a      	mov	r2, r1
 80014de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80014e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80014e6:	4413      	add	r3, r2
 80014e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014ec:	f04f 0000 	mov.w	r0, #0
 80014f0:	f04f 0100 	mov.w	r1, #0
 80014f4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80014f8:	4623      	mov	r3, r4
 80014fa:	0a18      	lsrs	r0, r3, #8
 80014fc:	462b      	mov	r3, r5
 80014fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001502:	462b      	mov	r3, r5
 8001504:	1219      	asrs	r1, r3, #8
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <BME280_compensate_P_int64+0x2e0>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	b21b      	sxth	r3, r3
 800150e:	17da      	asrs	r2, r3, #31
 8001510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001514:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001518:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800151c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001520:	464a      	mov	r2, r9
 8001522:	fb02 f203 	mul.w	r2, r2, r3
 8001526:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800152a:	4644      	mov	r4, r8
 800152c:	fb04 f303 	mul.w	r3, r4, r3
 8001530:	441a      	add	r2, r3
 8001532:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001536:	4644      	mov	r4, r8
 8001538:	fba3 4304 	umull	r4, r3, r3, r4
 800153c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001540:	4623      	mov	r3, r4
 8001542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800155c:	464c      	mov	r4, r9
 800155e:	0323      	lsls	r3, r4, #12
 8001560:	4644      	mov	r4, r8
 8001562:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001566:	4644      	mov	r4, r8
 8001568:	0322      	lsls	r2, r4, #12
 800156a:	1884      	adds	r4, r0, r2
 800156c:	633c      	str	r4, [r7, #48]	; 0x30
 800156e:	eb41 0303 	adc.w	r3, r1, r3
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
 8001574:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001578:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800157c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001580:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001584:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001588:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <BME280_compensate_P_int64+0x2e4>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800159c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015a0:	462b      	mov	r3, r5
 80015a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80015a6:	4642      	mov	r2, r8
 80015a8:	fb02 f203 	mul.w	r2, r2, r3
 80015ac:	464b      	mov	r3, r9
 80015ae:	4621      	mov	r1, r4
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	4622      	mov	r2, r4
 80015b8:	4641      	mov	r1, r8
 80015ba:	fba2 1201 	umull	r1, r2, r2, r1
 80015be:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80015c2:	460a      	mov	r2, r1
 80015c4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80015c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80015cc:	4413      	add	r3, r2
 80015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80015de:	4629      	mov	r1, r5
 80015e0:	104a      	asrs	r2, r1, #1
 80015e2:	4629      	mov	r1, r5
 80015e4:	17cb      	asrs	r3, r1, #31
 80015e6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80015ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015ee:	4313      	orrs	r3, r2
 80015f0:	d110      	bne.n	8001614 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80015f2:	2300      	movs	r3, #0
 80015f4:	e154      	b.n	80018a0 <BME280_compensate_P_int64+0x574>
 80015f6:	bf00      	nop
 80015f8:	200000ac 	.word	0x200000ac
 80015fc:	2000009c 	.word	0x2000009c
 8001600:	2000009a 	.word	0x2000009a
 8001604:	20000098 	.word	0x20000098
 8001608:	20000096 	.word	0x20000096
 800160c:	20000094 	.word	0x20000094
 8001610:	2000008a 	.word	0x2000008a
	}
	p = 1048576-adc_P;
 8001614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001618:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800161c:	17da      	asrs	r2, r3, #31
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001622:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001626:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800162a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800162e:	105b      	asrs	r3, r3, #1
 8001630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001634:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001638:	07db      	lsls	r3, r3, #31
 800163a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800163e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001642:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001646:	4621      	mov	r1, r4
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	67b9      	str	r1, [r7, #120]	; 0x78
 800164c:	4629      	mov	r1, r5
 800164e:	eb61 0303 	sbc.w	r3, r1, r3
 8001652:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001654:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001658:	4622      	mov	r2, r4
 800165a:	462b      	mov	r3, r5
 800165c:	1891      	adds	r1, r2, r2
 800165e:	6239      	str	r1, [r7, #32]
 8001660:	415b      	adcs	r3, r3
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001668:	4621      	mov	r1, r4
 800166a:	1851      	adds	r1, r2, r1
 800166c:	61b9      	str	r1, [r7, #24]
 800166e:	4629      	mov	r1, r5
 8001670:	414b      	adcs	r3, r1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001680:	4649      	mov	r1, r9
 8001682:	018b      	lsls	r3, r1, #6
 8001684:	4641      	mov	r1, r8
 8001686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800168a:	4641      	mov	r1, r8
 800168c:	018a      	lsls	r2, r1, #6
 800168e:	4641      	mov	r1, r8
 8001690:	1889      	adds	r1, r1, r2
 8001692:	6139      	str	r1, [r7, #16]
 8001694:	4649      	mov	r1, r9
 8001696:	eb43 0101 	adc.w	r1, r3, r1
 800169a:	6179      	str	r1, [r7, #20]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016a8:	4649      	mov	r1, r9
 80016aa:	008b      	lsls	r3, r1, #2
 80016ac:	4641      	mov	r1, r8
 80016ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016b2:	4641      	mov	r1, r8
 80016b4:	008a      	lsls	r2, r1, #2
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	4622      	mov	r2, r4
 80016be:	189b      	adds	r3, r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	460b      	mov	r3, r1
 80016c4:	462a      	mov	r2, r5
 80016c6:	eb42 0303 	adc.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016d8:	4649      	mov	r1, r9
 80016da:	008b      	lsls	r3, r1, #2
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016e2:	4641      	mov	r1, r8
 80016e4:	008a      	lsls	r2, r1, #2
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	4622      	mov	r2, r4
 80016ee:	189b      	adds	r3, r3, r2
 80016f0:	673b      	str	r3, [r7, #112]	; 0x70
 80016f2:	462b      	mov	r3, r5
 80016f4:	460a      	mov	r2, r1
 80016f6:	eb42 0303 	adc.w	r3, r2, r3
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
 80016fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001700:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001704:	f7ff f9fa 	bl	8000afc <__aeabi_ldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <BME280_compensate_P_int64+0x580>)
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	b21b      	sxth	r3, r3
 8001718:	17da      	asrs	r2, r3, #31
 800171a:	66bb      	str	r3, [r7, #104]	; 0x68
 800171c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800171e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	0b50      	lsrs	r0, r2, #13
 800172c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001730:	1359      	asrs	r1, r3, #13
 8001732:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001736:	462b      	mov	r3, r5
 8001738:	fb00 f203 	mul.w	r2, r0, r3
 800173c:	4623      	mov	r3, r4
 800173e:	fb03 f301 	mul.w	r3, r3, r1
 8001742:	4413      	add	r3, r2
 8001744:	4622      	mov	r2, r4
 8001746:	fba2 1200 	umull	r1, r2, r2, r0
 800174a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800174e:	460a      	mov	r2, r1
 8001750:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800175e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0b50      	lsrs	r0, r2, #13
 800176c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001770:	1359      	asrs	r1, r3, #13
 8001772:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001776:	462b      	mov	r3, r5
 8001778:	fb00 f203 	mul.w	r2, r0, r3
 800177c:	4623      	mov	r3, r4
 800177e:	fb03 f301 	mul.w	r3, r3, r1
 8001782:	4413      	add	r3, r2
 8001784:	4622      	mov	r2, r4
 8001786:	fba2 1200 	umull	r1, r2, r2, r0
 800178a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800178e:	460a      	mov	r2, r1
 8001790:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001794:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001798:	4413      	add	r3, r2
 800179a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80017aa:	4621      	mov	r1, r4
 80017ac:	0e4a      	lsrs	r2, r1, #25
 80017ae:	4629      	mov	r1, r5
 80017b0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017b4:	4629      	mov	r1, r5
 80017b6:	164b      	asrs	r3, r1, #25
 80017b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <BME280_compensate_P_int64+0x584>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	17da      	asrs	r2, r3, #31
 80017c6:	663b      	str	r3, [r7, #96]	; 0x60
 80017c8:	667a      	str	r2, [r7, #100]	; 0x64
 80017ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017d2:	462a      	mov	r2, r5
 80017d4:	fb02 f203 	mul.w	r2, r2, r3
 80017d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017dc:	4621      	mov	r1, r4
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017e8:	4621      	mov	r1, r4
 80017ea:	fba2 1201 	umull	r1, r2, r2, r1
 80017ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80017f2:	460a      	mov	r2, r1
 80017f4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80017f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80017fc:	4413      	add	r3, r2
 80017fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800180e:	4621      	mov	r1, r4
 8001810:	0cca      	lsrs	r2, r1, #19
 8001812:	4629      	mov	r1, r5
 8001814:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001818:	4629      	mov	r1, r5
 800181a:	14cb      	asrs	r3, r1, #19
 800181c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001820:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001824:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001828:	1884      	adds	r4, r0, r2
 800182a:	65bc      	str	r4, [r7, #88]	; 0x58
 800182c:	eb41 0303 	adc.w	r3, r1, r3
 8001830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001832:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001836:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800183a:	4621      	mov	r1, r4
 800183c:	1889      	adds	r1, r1, r2
 800183e:	6539      	str	r1, [r7, #80]	; 0x50
 8001840:	4629      	mov	r1, r5
 8001842:	eb43 0101 	adc.w	r1, r3, r1
 8001846:	6579      	str	r1, [r7, #84]	; 0x54
 8001848:	f04f 0000 	mov.w	r0, #0
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001854:	4623      	mov	r3, r4
 8001856:	0a18      	lsrs	r0, r3, #8
 8001858:	462b      	mov	r3, r5
 800185a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800185e:	462b      	mov	r3, r5
 8001860:	1219      	asrs	r1, r3, #8
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <BME280_compensate_P_int64+0x588>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	b21b      	sxth	r3, r3
 800186a:	17da      	asrs	r2, r3, #31
 800186c:	64bb      	str	r3, [r7, #72]	; 0x48
 800186e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800187c:	464c      	mov	r4, r9
 800187e:	0123      	lsls	r3, r4, #4
 8001880:	4644      	mov	r4, r8
 8001882:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001886:	4644      	mov	r4, r8
 8001888:	0122      	lsls	r2, r4, #4
 800188a:	1884      	adds	r4, r0, r2
 800188c:	603c      	str	r4, [r7, #0]
 800188e:	eb41 0303 	adc.w	r3, r1, r3
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001898:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 800189c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ac:	200000a2 	.word	0x200000a2
 80018b0:	200000a0 	.word	0x200000a0
 80018b4:	2000009e 	.word	0x2000009e

080018b8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <bme280_compensate_H_int32+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80018c8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	039a      	lsls	r2, r3, #14
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <bme280_compensate_H_int32+0xc0>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	051b      	lsls	r3, r3, #20
 80018d6:	1ad2      	subs	r2, r2, r3
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <bme280_compensate_H_int32+0xc4>)
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	4619      	mov	r1, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80018e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80018ec:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80018ee:	4a24      	ldr	r2, [pc, #144]	; (8001980 <bme280_compensate_H_int32+0xc8>)
 80018f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018f4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80018fc:	1292      	asrs	r2, r2, #10
 80018fe:	4921      	ldr	r1, [pc, #132]	; (8001984 <bme280_compensate_H_int32+0xcc>)
 8001900:	8809      	ldrh	r1, [r1, #0]
 8001902:	4608      	mov	r0, r1
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	fb00 f101 	mul.w	r1, r0, r1
 800190a:	12c9      	asrs	r1, r1, #11
 800190c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001910:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001914:	1292      	asrs	r2, r2, #10
 8001916:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <bme280_compensate_H_int32+0xd0>)
 800191c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001920:	fb01 f202 	mul.w	r2, r1, r2
 8001924:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001928:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	13db      	asrs	r3, r3, #15
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	13d2      	asrs	r2, r2, #15
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <bme280_compensate_H_int32+0xd4>)
 8001940:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001942:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001946:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001954:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800195c:	bfa8      	it	ge
 800195e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001962:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	131b      	asrs	r3, r3, #12
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	200000ac 	.word	0x200000ac
 8001978:	200000a6 	.word	0x200000a6
 800197c:	200000a8 	.word	0x200000a8
 8001980:	200000aa 	.word	0x200000aa
 8001984:	2000008e 	.word	0x2000008e
 8001988:	200000a4 	.word	0x200000a4
 800198c:	2000008c 	.word	0x2000008c

08001990 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001994:	f7ff fc38 	bl	8001208 <BMEReadRaw>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d163      	bne.n	8001a66 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 800199e:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <BME280_Measure+0xf4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019a6:	d104      	bne.n	80019b2 <BME280_Measure+0x22>
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <BME280_Measure+0xf8>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e016      	b.n	80019e0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <BME280_Measure+0xf4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc76 	bl	80012a8 <BME280_compensate_T_int32>
 80019bc:	4603      	mov	r3, r0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdd0 	bl	8000564 <__aeabi_i2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <BME280_Measure+0xfc>)
 80019ca:	f7fe ff5f 	bl	800088c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f841 	bl	8000a5c <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <BME280_Measure+0xf8>)
 80019de:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <BME280_Measure+0x100>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019e8:	d104      	bne.n	80019f4 <BME280_Measure+0x64>
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <BME280_Measure+0x104>)
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e016      	b.n	8001a22 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <BME280_Measure+0x100>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc97 	bl	800132c <BME280_compensate_P_int64>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd9f 	bl	8000544 <__aeabi_ui2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <BME280_Measure+0x108>)
 8001a0c:	f7fe ff3e 	bl	800088c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f820 	bl	8000a5c <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <BME280_Measure+0x104>)
 8001a20:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <BME280_Measure+0x10c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2a:	d104      	bne.n	8001a36 <BME280_Measure+0xa6>
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <BME280_Measure+0x110>)
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
	else
	{
		Temperature = Pressure = Humidity = 0;

	}
}
 8001a34:	e023      	b.n	8001a7e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <BME280_Measure+0x10c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff3c 	bl	80018b8 <bme280_compensate_H_int32>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd7e 	bl	8000544 <__aeabi_ui2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <BME280_Measure+0x114>)
 8001a4e:	f7fe ff1d 	bl	800088c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7fe ffff 	bl	8000a5c <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <BME280_Measure+0x110>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	e00b      	b.n	8001a7e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <BME280_Measure+0x110>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <BME280_Measure+0x110>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <BME280_Measure+0x104>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <BME280_Measure+0x104>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <BME280_Measure+0xf8>)
 8001a7c:	6013      	str	r3, [r2, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000007c 	.word	0x2000007c
 8001a88:	20000148 	.word	0x20000148
 8001a8c:	40590000 	.word	0x40590000
 8001a90:	20000080 	.word	0x20000080
 8001a94:	2000014c 	.word	0x2000014c
 8001a98:	40700000 	.word	0x40700000
 8001a9c:	20000084 	.word	0x20000084
 8001aa0:	20000150 	.word	0x20000150
 8001aa4:	40900000 	.word	0x40900000

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b09f      	sub	sp, #124	; 0x7c
 8001aac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f000 fb4b 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab2:	f000 f8bb 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f000 f97f 	bl	8001db8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aba:	f000 f953 	bl	8001d64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001abe:	f000 f923 	bl	8001d08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2303      	movs	r3, #3
 8001acc:	2201      	movs	r2, #1
 8001ace:	2105      	movs	r1, #5
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f7ff fac3 	bl	800105c <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BME280_Measure();
 8001ad6:	f7ff ff5b 	bl	8001990 <BME280_Measure>
	  if(Temperature>10)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <main+0x164>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	dd78      	ble.n	8001be0 <main+0x138>
	  {
		  Temperature *= 100;
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <main+0x164>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001c10 <main+0x168>
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <main+0x164>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
		  Pressure *=100;
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <main+0x16c>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001c10 <main+0x168>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <main+0x16c>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
		  Humidity *=100;
 8001b16:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <main+0x170>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001c10 <main+0x168>
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <main+0x170>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]
		  sprintf((char *)buff, "%u.%02u C - %u.%02u Pa - %u.%02u %% \r\n",((unsigned int)Temperature /100),((unsigned int)Temperature %100),((unsigned int)Pressure /100),((unsigned int)Pressure % 100),((unsigned int)Humidity /100),((unsigned int)Humidity %100));
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <main+0x164>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b34:	ee17 2a90 	vmov	r2, s15
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <main+0x174>)
 8001b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3e:	095e      	lsrs	r6, r3, #5
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <main+0x164>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4a:	ee17 2a90 	vmov	r2, s15
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <main+0x174>)
 8001b50:	fba3 1302 	umull	r1, r3, r3, r2
 8001b54:	0959      	lsrs	r1, r3, #5
 8001b56:	2364      	movs	r3, #100	; 0x64
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	1ad1      	subs	r1, r2, r3
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <main+0x16c>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b68:	ee17 2a90 	vmov	r2, s15
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <main+0x174>)
 8001b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b72:	0958      	lsrs	r0, r3, #5
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <main+0x16c>)
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7e:	ee17 2a90 	vmov	r2, s15
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <main+0x174>)
 8001b84:	fba3 4302 	umull	r4, r3, r3, r2
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	2464      	movs	r4, #100	; 0x64
 8001b8c:	fb04 f303 	mul.w	r3, r4, r3
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <main+0x170>)
 8001b94:	edd2 7a00 	vldr	s15, [r2]
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 4a90 	vmov	r4, s15
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <main+0x174>)
 8001ba2:	fba2 4204 	umull	r4, r2, r2, r4
 8001ba6:	0954      	lsrs	r4, r2, #5
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <main+0x170>)
 8001baa:	edd2 7a00 	vldr	s15, [r2]
 8001bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb2:	ee17 5a90 	vmov	r5, s15
 8001bb6:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <main+0x174>)
 8001bb8:	fba2 c205 	umull	ip, r2, r2, r5
 8001bbc:	0952      	lsrs	r2, r2, #5
 8001bbe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001bc2:	fb0c f202 	mul.w	r2, ip, r2
 8001bc6:	1aaa      	subs	r2, r5, r2
 8001bc8:	1d3d      	adds	r5, r7, #4
 8001bca:	9203      	str	r2, [sp, #12]
 8001bcc:	9402      	str	r4, [sp, #8]
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	9000      	str	r0, [sp, #0]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	4912      	ldr	r1, [pc, #72]	; (8001c20 <main+0x178>)
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f002 ff49 	bl	8004a70 <siprintf>
 8001bde:	e004      	b.n	8001bea <main+0x142>
	  }
	  else
	  {
		  strcpy((char *)buff, "Error tx!\r\n");
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <main+0x17c>)
 8001be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001be6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  }

	  //Sending out data
	  HAL_UART_Transmit(&huart2,buff, strlen((char *)buff),HAL_MAX_DELAY);
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fb0f 	bl	8000210 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	1d39      	adds	r1, r7, #4
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bfc:	480a      	ldr	r0, [pc, #40]	; (8001c28 <main+0x180>)
 8001bfe:	f002 fbc2 	bl	8004386 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8001c02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c06:	f000 fb11 	bl	800222c <HAL_Delay>
	  BME280_Measure();
 8001c0a:	e764      	b.n	8001ad6 <main+0x2e>
 8001c0c:	20000148 	.word	0x20000148
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	2000014c 	.word	0x2000014c
 8001c18:	20000150 	.word	0x20000150
 8001c1c:	51eb851f 	.word	0x51eb851f
 8001c20:	080053d0 	.word	0x080053d0
 8001c24:	080053f8 	.word	0x080053f8
 8001c28:	20000104 	.word	0x20000104

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b094      	sub	sp, #80	; 0x50
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	2234      	movs	r2, #52	; 0x34
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 ff38 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <SystemClock_Config+0xd4>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <SystemClock_Config+0xd4>)
 8001c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <SystemClock_Config+0xd4>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <SystemClock_Config+0xd8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <SystemClock_Config+0xd8>)
 8001c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <SystemClock_Config+0xd8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c94:	2310      	movs	r3, #16
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001caa:	2304      	movs	r3, #4
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 f878 	bl	8003db0 <HAL_RCC_OscConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cc6:	f000 f8e5 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cca:	230f      	movs	r3, #15
 8001ccc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fd18 	bl	800371c <HAL_RCC_ClockConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cf2:	f000 f8cf 	bl	8001e94 <Error_Handler>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	; 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000

08001d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <MX_I2C1_Init+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <MX_I2C1_Init+0x58>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d46:	f000 fd29 	bl	800279c <HAL_I2C_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d50:	f000 f8a0 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200000b0 	.word	0x200000b0
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	000186a0 	.word	0x000186a0

08001d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_USART2_UART_Init+0x50>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f002 faa6 	bl	80042ec <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da6:	f000 f875 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000104 	.word	0x20000104
 8001db4:	40004400 	.word	0x40004400

08001db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_GPIO_Init+0xd0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2120      	movs	r1, #32
 8001e42:	4812      	ldr	r0, [pc, #72]	; (8001e8c <MX_GPIO_Init+0xd4>)
 8001e44:	f000 fc90 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_GPIO_Init+0xd8>)
 8001e60:	f000 faee 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e64:	2320      	movs	r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_GPIO_Init+0xd4>)
 8001e7c:	f000 fae0 	bl	8002440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020800 	.word	0x40020800

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f000 fa7a 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_I2C_MspInit+0x84>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12c      	bne.n	8001f6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f34:	2312      	movs	r3, #18
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f40:	2304      	movs	r3, #4
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <HAL_I2C_MspInit+0x8c>)
 8001f4c:	f000 fa78 	bl	8002440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_I2C_MspInit+0x88>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005400 	.word	0x40005400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020400 	.word	0x40020400

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_UART_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001ff6:	f000 fa23 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40004400 	.word	0x40004400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <NMI_Handler+0x4>

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 f8c6 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f002 fd14 	bl	8004ac0 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20020000 	.word	0x20020000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	20000154 	.word	0x20000154
 80020cc:	200002a8 	.word	0x200002a8

080020d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002110:	4c0b      	ldr	r4, [pc, #44]	; (8002140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800211e:	f7ff ffd7 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002122:	f002 fcd3 	bl	8004acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7ff fcbf 	bl	8001aa8 <main>
  bx  lr    
 800212a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002138:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 800213c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002140:	200002a4 	.word	0x200002a4

08002144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_Init+0x40>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_Init+0x40>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_Init+0x40>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 f931 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f808 	bl	800218c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff fe90 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x54>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x58>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f93b 	bl	8002426 <HAL_SYSTICK_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00e      	b.n	80021d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d80a      	bhi.n	80021d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	f000 f911 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <HAL_InitTick+0x5c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e000      	b.n	80021d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000008 	.word	0x20000008
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008
 8002210:	20000158 	.word	0x20000158

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000158 	.word	0x20000158

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff47 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff5c 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffb0 	bl	8002394 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e165      	b.n	8002728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8154 	bne.w	8002722 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	2b02      	cmp	r3, #2
 8002490:	d130      	bne.n	80024f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0201 	and.w	r2, r3, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d017      	beq.n	8002530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ae 	beq.w	8002722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_GPIO_Init+0x304>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_GPIO_Init+0x308>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x21a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_GPIO_Init+0x30c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x216>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x310>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x212>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_GPIO_Init+0x314>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_GPIO_Init+0x318>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x20a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_GPIO_Init+0x31c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x206>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a49      	ldr	r2, [pc, #292]	; (8002760 <HAL_GPIO_Init+0x320>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x202>
 800263e:	2306      	movs	r3, #6
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002642:	2307      	movs	r3, #7
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x304>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_GPIO_Init+0x324>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a31      	ldr	r2, [pc, #196]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x324>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae96 	bls.w	800245c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e12b      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fb94 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002800:	f001 f87e 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a81      	ldr	r2, [pc, #516]	; (8002a10 <HAL_I2C_Init+0x274>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d807      	bhi.n	8002820 <HAL_I2C_Init+0x84>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <HAL_I2C_Init+0x278>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e006      	b.n	800282e <HAL_I2C_Init+0x92>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a7d      	ldr	r2, [pc, #500]	; (8002a18 <HAL_I2C_Init+0x27c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e7      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a78      	ldr	r2, [pc, #480]	; (8002a1c <HAL_I2C_Init+0x280>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a6a      	ldr	r2, [pc, #424]	; (8002a10 <HAL_I2C_Init+0x274>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d802      	bhi.n	8002870 <HAL_I2C_Init+0xd4>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3301      	adds	r3, #1
 800286e:	e009      	b.n	8002884 <HAL_I2C_Init+0xe8>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_I2C_Init+0x284>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	3301      	adds	r3, #1
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	495c      	ldr	r1, [pc, #368]	; (8002a10 <HAL_I2C_Init+0x274>)
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d819      	bhi.n	80028d8 <HAL_I2C_Init+0x13c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e59      	subs	r1, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028b8:	400b      	ands	r3, r1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_I2C_Init+0x138>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	e051      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d4:	2304      	movs	r3, #4
 80028d6:	e04f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d111      	bne.n	8002904 <HAL_I2C_Init+0x168>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e012      	b.n	800292a <HAL_I2C_Init+0x18e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x196>
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <HAL_I2C_Init+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e58      	subs	r0, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6911      	ldr	r1, [r2, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	000186a0 	.word	0x000186a0
 8002a14:	001e847f 	.word	0x001e847f
 8002a18:	003d08ff 	.word	0x003d08ff
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3e:	f7ff fbe9 	bl	8002214 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80d9 	bne.w	8002c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_I2C_Mem_Write+0x1ec>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fc7f 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0cc      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Mem_Write+0x56>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0c5      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d007      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2221      	movs	r2, #33	; 0x21
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_I2C_Mem_Write+0x1f0>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae2:	88f8      	ldrh	r0, [r7, #6]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fab6 	bl	8003064 <I2C_RequestMemoryWrite>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d052      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e081      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fd00 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d107      	bne.n	8002b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1aa      	bne.n	8002b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fcec 	bl	800358e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e016      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	00100002 	.word	0x00100002
 8002c14:	ffff0000 	.word	0xffff0000

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c32:	f7ff faef 	bl	8002214 <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	f040 8208 	bne.w	8003056 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2319      	movs	r3, #25
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	497b      	ldr	r1, [pc, #492]	; (8002e3c <HAL_I2C_Mem_Read+0x224>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb85 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e1fb      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x56>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e1f4      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d007      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2222      	movs	r2, #34	; 0x22
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_I2C_Mem_Read+0x228>)
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd6:	88f8      	ldrh	r0, [r7, #6]
 8002cd8:	893a      	ldrh	r2, [r7, #8]
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa52 	bl	8003190 <I2C_RequestMemoryRead>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1b0      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	623b      	str	r3, [r7, #32]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e184      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d11b      	bne.n	8002d66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e164      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d11b      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	e144      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dbc:	e138      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	f200 80f1 	bhi.w	8002faa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d123      	bne.n	8002e18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fc1b 	bl	8003610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e139      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e16:	e10b      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d14e      	bne.n	8002ebe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	2200      	movs	r2, #0
 8002e28:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa98 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e10e      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
 8002e3a:	bf00      	nop
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000
 8002e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ebc:	e0b8      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4966      	ldr	r1, [pc, #408]	; (8003060 <HAL_I2C_Mem_Read+0x448>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa49 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0bf      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2200      	movs	r2, #0
 8002f22:	494f      	ldr	r1, [pc, #316]	; (8003060 <HAL_I2C_Mem_Read+0x448>)
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fa1b 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e091      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa8:	e042      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fb2e 	bl	8003610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e04c      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d118      	bne.n	8003030 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f aec2 	bne.w	8002dbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3728      	adds	r7, #40	; 0x28
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	00010004 	.word	0x00010004

08003064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f960 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d103      	bne.n	80030be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e05f      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	492d      	ldr	r1, [pc, #180]	; (800318c <I2C_RequestMemoryWrite+0x128>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f998 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04c      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa02 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02b      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	e021      	b.n	8003180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f9dc 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e005      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	00010002 	.word	0x00010002

08003190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8c2 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f0:	d103      	bne.n	80031fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0aa      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800320c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	4952      	ldr	r1, [pc, #328]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f8fa 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e097      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f964 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e076      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e021      	b.n	80032bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	6a39      	ldr	r1, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f93e 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	d107      	bne.n	80032ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e050      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b2:	893b      	ldrh	r3, [r7, #8]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f923 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e035      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f82b 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d103      	bne.n	8003328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e013      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800332c:	897b      	ldrh	r3, [r7, #10]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f863 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010002 	.word	0x00010002

08003360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003370:	e025      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003378:	d021      	beq.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe ff4b 	bl	8002214 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d116      	bne.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e023      	b.n	8003406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10d      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	e00c      	b.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0b6      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341c:	e051      	b.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d123      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0204 	orr.w	r2, r3, #4
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e046      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fec9 	bl	8002214 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e020      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10c      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e00b      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d18d      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	e02d      	b.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8ce 	bl	80036bc <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02d      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003530:	d021      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fe6f 	bl	8002214 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d116      	bne.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d1ca      	bne.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359a:	e02d      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f88d 	bl	80036bc <I2C_IsAcknowledgeFailed>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e02d      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b2:	d021      	beq.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7fe fe2e 	bl	8002214 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d1ca      	bne.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800361c:	e042      	b.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d119      	bne.n	8003660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e029      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003660:	f7fe fdd8 	bl	8002214 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d1b5      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d11b      	bne.n	800370c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cc      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d90c      	bls.n	8003758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d044      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e067      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4934      	ldr	r1, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7fe fd02 	bl	8002214 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fe fcfe 	bl	8002214 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e04f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20c      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f855 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fc62 	bl	800218c <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08005404 	.word	0x08005404
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08005414 	.word	0x08005414

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08005414 	.word	0x08005414

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b0ae      	sub	sp, #184	; 0xb8
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4bcb      	ldr	r3, [pc, #812]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b0c      	cmp	r3, #12
 8003980:	f200 8206 	bhi.w	8003d90 <HAL_RCC_GetSysClockFreq+0x440>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039c1 	.word	0x080039c1
 8003990:	08003d91 	.word	0x08003d91
 8003994:	08003d91 	.word	0x08003d91
 8003998:	08003d91 	.word	0x08003d91
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	08003d91 	.word	0x08003d91
 80039a4:	08003d91 	.word	0x08003d91
 80039a8:	08003d91 	.word	0x08003d91
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	08003d91 	.word	0x08003d91
 80039b4:	08003d91 	.word	0x08003d91
 80039b8:	08003d91 	.word	0x08003d91
 80039bc:	08003bc1 	.word	0x08003bc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4bb9      	ldr	r3, [pc, #740]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x358>)
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039c6:	e1e7      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4bb8      	ldr	r3, [pc, #736]	; (8003cac <HAL_RCC_GetSysClockFreq+0x35c>)
 80039ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039ce:	e1e3      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4bb4      	ldr	r3, [pc, #720]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039dc:	4bb1      	ldr	r3, [pc, #708]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d071      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4bae      	ldr	r3, [pc, #696]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4621      	mov	r1, r4
 8003a28:	1a51      	subs	r1, r2, r1
 8003a2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a40:	4649      	mov	r1, r9
 8003a42:	018b      	lsls	r3, r1, #6
 8003a44:	4641      	mov	r1, r8
 8003a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	018a      	lsls	r2, r1, #6
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a54:	4649      	mov	r1, r9
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a68:	4649      	mov	r1, r9
 8003a6a:	00cb      	lsls	r3, r1, #3
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a72:	4641      	mov	r1, r8
 8003a74:	00ca      	lsls	r2, r1, #3
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
 8003a82:	462b      	mov	r3, r5
 8003a84:	460a      	mov	r2, r1
 8003a86:	eb42 0303 	adc.w	r3, r2, r3
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a98:	4629      	mov	r1, r5
 8003a9a:	024b      	lsls	r3, r1, #9
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	024a      	lsls	r2, r1, #9
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ab4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ab8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003abc:	f7fd f86e 	bl	8000b9c <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aca:	e067      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003acc:	4b75      	ldr	r3, [pc, #468]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aee:	4622      	mov	r2, r4
 8003af0:	462b      	mov	r3, r5
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b00:	0150      	lsls	r0, r2, #5
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4621      	mov	r1, r4
 8003b08:	1a51      	subs	r1, r2, r1
 8003b0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b20:	4649      	mov	r1, r9
 8003b22:	018b      	lsls	r3, r1, #6
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	018a      	lsls	r2, r1, #6
 8003b2e:	4641      	mov	r1, r8
 8003b30:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b34:	4649      	mov	r1, r9
 8003b36:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b4e:	4692      	mov	sl, r2
 8003b50:	469b      	mov	fp, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	eb1a 0303 	adds.w	r3, sl, r3
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b6e:	4629      	mov	r1, r5
 8003b70:	028b      	lsls	r3, r1, #10
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b78:	4621      	mov	r1, r4
 8003b7a:	028a      	lsls	r2, r1, #10
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b84:	2200      	movs	r2, #0
 8003b86:	673b      	str	r3, [r7, #112]	; 0x70
 8003b88:	677a      	str	r2, [r7, #116]	; 0x74
 8003b8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b8e:	f7fd f805 	bl	8000b9c <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4613      	mov	r3, r2
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bbe:	e0eb      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06b      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	2200      	movs	r2, #0
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
 8003bec:	2300      	movs	r3, #0
 8003bee:	667b      	str	r3, [r7, #100]	; 0x64
 8003bf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0159      	lsls	r1, r3, #5
 8003c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c06:	0150      	lsls	r0, r2, #5
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	1a51      	subs	r1, r2, r1
 8003c10:	61b9      	str	r1, [r7, #24]
 8003c12:	4629      	mov	r1, r5
 8003c14:	eb63 0301 	sbc.w	r3, r3, r1
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c26:	4659      	mov	r1, fp
 8003c28:	018b      	lsls	r3, r1, #6
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c30:	4651      	mov	r1, sl
 8003c32:	018a      	lsls	r2, r1, #6
 8003c34:	4651      	mov	r1, sl
 8003c36:	ebb2 0801 	subs.w	r8, r2, r1
 8003c3a:	4659      	mov	r1, fp
 8003c3c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c54:	4690      	mov	r8, r2
 8003c56:	4699      	mov	r9, r3
 8003c58:	4623      	mov	r3, r4
 8003c5a:	eb18 0303 	adds.w	r3, r8, r3
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	462b      	mov	r3, r5
 8003c62:	eb49 0303 	adc.w	r3, r9, r3
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c74:	4629      	mov	r1, r5
 8003c76:	024b      	lsls	r3, r1, #9
 8003c78:	4621      	mov	r1, r4
 8003c7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7e:	4621      	mov	r1, r4
 8003c80:	024a      	lsls	r2, r1, #9
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c94:	f7fc ff82 	bl	8000b9c <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca2:	e065      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x420>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	4611      	mov	r1, r2
 8003cbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cdc:	0150      	lsls	r0, r2, #5
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	1a51      	subs	r1, r2, r1
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	4649      	mov	r1, r9
 8003cea:	eb63 0301 	sbc.w	r3, r3, r1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d06:	4651      	mov	r1, sl
 8003d08:	018a      	lsls	r2, r1, #6
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	1a54      	subs	r4, r2, r1
 8003d0e:	4659      	mov	r1, fp
 8003d10:	eb63 0501 	sbc.w	r5, r3, r1
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	00eb      	lsls	r3, r5, #3
 8003d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d22:	00e2      	lsls	r2, r4, #3
 8003d24:	4614      	mov	r4, r2
 8003d26:	461d      	mov	r5, r3
 8003d28:	4643      	mov	r3, r8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d58:	2200      	movs	r2, #0
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d62:	f7fc ff1b 	bl	8000b9c <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0f1b      	lsrs	r3, r3, #28
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	37b8      	adds	r7, #184	; 0xb8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400

08003db0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e28d      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8083 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dd0:	4b94      	ldr	r3, [pc, #592]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d019      	beq.n	8003e10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ddc:	4b91      	ldr	r3, [pc, #580]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003de8:	4b8e      	ldr	r3, [pc, #568]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df4:	d00c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d112      	bne.n	8003e28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4b84      	ldr	r3, [pc, #528]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d05b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x124>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d157      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e25a      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x90>
 8003e32:	4b7c      	ldr	r3, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a7b      	ldr	r2, [pc, #492]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e01d      	b.n	8003e7c <HAL_RCC_OscConfig+0xcc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCC_OscConfig+0xb4>
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a75      	ldr	r2, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a72      	ldr	r2, [pc, #456]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e00b      	b.n	8003e7c <HAL_RCC_OscConfig+0xcc>
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b6c      	ldr	r3, [pc, #432]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a6b      	ldr	r2, [pc, #428]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe f9c6 	bl	8002214 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fe f9c2 	bl	8002214 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e21f      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0xdc>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe f9b2 	bl	8002214 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fe f9ae 	bl	8002214 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e20b      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x104>
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d06f      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ee2:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eee:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x186>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1d3      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x278>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f95b 	bl	8002214 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe f957 	bl	8002214 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1b4      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4925      	ldr	r1, [pc, #148]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x278>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f93a 	bl	8002214 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe f936 	bl	8002214 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e193      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d036      	beq.n	800403c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x27c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe f91a 	bl	8002214 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe f916 	bl	8002214 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e173      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x234>
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x27c>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe f903 	bl	8002214 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e00e      	b.n	8004030 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fe f8ff 	bl	8002214 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d907      	bls.n	8004030 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e15c      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
 8004024:	40023800 	.word	0x40023800
 8004028:	42470000 	.word	0x42470000
 800402c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b8a      	ldr	r3, [pc, #552]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ea      	bne.n	8004012 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8097 	beq.w	8004178 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404e:	4b83      	ldr	r3, [pc, #524]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	4b7f      	ldr	r3, [pc, #508]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a7e      	ldr	r2, [pc, #504]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b79      	ldr	r3, [pc, #484]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a75      	ldr	r2, [pc, #468]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe f8bf 	bl	8002214 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe f8bb 	bl	8002214 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e118      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x31e>
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x358>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x340>
 80040d6:	4b61      	ldr	r3, [pc, #388]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b5e      	ldr	r3, [pc, #376]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x358>
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fe f880 	bl	8002214 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe f87c 	bl	8002214 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0d7      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ee      	beq.n	8004118 <HAL_RCC_OscConfig+0x368>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe f86a 	bl	8002214 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe f866 	bl	8002214 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0c1      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ee      	bne.n	8004144 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80ad 	beq.w	80042dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d060      	beq.n	8004250 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d145      	bne.n	8004222 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe f83a 	bl	8002214 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe f836 	bl	8002214 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e093      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	491b      	ldr	r1, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe f80b 	bl	8002214 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe f807 	bl	8002214 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e064      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x452>
 8004220:	e05c      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fff4 	bl	8002214 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fff0 	bl	8002214 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04d      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x480>
 800424e:	e045      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e040      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
 800425c:	40023800 	.word	0x40023800
 8004260:	40007000 	.word	0x40007000
 8004264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <HAL_RCC_OscConfig+0x538>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d030      	beq.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d129      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d122      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d119      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d10f      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e03f      	b.n	800437e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd fe34 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f929 	bl	8004588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b08a      	sub	sp, #40	; 0x28
 800438a:	af02      	add	r7, sp, #8
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d17c      	bne.n	80044a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_UART_Transmit+0x2c>
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e075      	b.n	80044a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_UART_Transmit+0x3e>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e06e      	b.n	80044a2 <HAL_UART_Transmit+0x11c>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2221      	movs	r2, #33	; 0x21
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043da:	f7fd ff1b 	bl	8002214 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d108      	bne.n	8004408 <HAL_UART_Transmit+0x82>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e003      	b.n	8004410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004418:	e02a      	b.n	8004470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f840 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e036      	b.n	80044a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3302      	adds	r3, #2
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e007      	b.n	8004462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1cf      	bne.n	800441a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	2140      	movs	r1, #64	; 0x40
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f810 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e006      	b.n	80044a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b090      	sub	sp, #64	; 0x40
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ba:	e050      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c2:	d04c      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x30>
 80044ca:	f7fd fea3 	bl	8002214 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d241      	bcs.n	800455e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fa:	637a      	str	r2, [r7, #52]	; 0x34
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	613b      	str	r3, [r7, #16]
   return(result);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800452e:	623a      	str	r2, [r7, #32]
 8004530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	61bb      	str	r3, [r7, #24]
   return(result);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e00f      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	429a      	cmp	r2, r3
 800457a:	d09f      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3740      	adds	r7, #64	; 0x40
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800458c:	b0c0      	sub	sp, #256	; 0x100
 800458e:	af00      	add	r7, sp, #0
 8004590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	68d9      	ldr	r1, [r3, #12]
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	ea40 0301 	orr.w	r3, r0, r1
 80045b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045e0:	f021 010c 	bic.w	r1, r1, #12
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ee:	430b      	orrs	r3, r1
 80045f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	6999      	ldr	r1, [r3, #24]
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	ea40 0301 	orr.w	r3, r0, r1
 800460e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b8f      	ldr	r3, [pc, #572]	; (8004854 <UART_SetConfig+0x2cc>)
 8004618:	429a      	cmp	r2, r3
 800461a:	d005      	beq.n	8004628 <UART_SetConfig+0xa0>
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b8d      	ldr	r3, [pc, #564]	; (8004858 <UART_SetConfig+0x2d0>)
 8004624:	429a      	cmp	r2, r3
 8004626:	d104      	bne.n	8004632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7ff f97e 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 800462c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004630:	e003      	b.n	800463a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004632:	f7ff f965 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	f040 810c 	bne.w	8004860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800464c:	2200      	movs	r2, #0
 800464e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	1891      	adds	r1, r2, r2
 8004660:	65b9      	str	r1, [r7, #88]	; 0x58
 8004662:	415b      	adcs	r3, r3
 8004664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800466a:	4621      	mov	r1, r4
 800466c:	eb12 0801 	adds.w	r8, r2, r1
 8004670:	4629      	mov	r1, r5
 8004672:	eb43 0901 	adc.w	r9, r3, r1
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800468a:	4690      	mov	r8, r2
 800468c:	4699      	mov	r9, r3
 800468e:	4623      	mov	r3, r4
 8004690:	eb18 0303 	adds.w	r3, r8, r3
 8004694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004698:	462b      	mov	r3, r5
 800469a:	eb49 0303 	adc.w	r3, r9, r3
 800469e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046b6:	460b      	mov	r3, r1
 80046b8:	18db      	adds	r3, r3, r3
 80046ba:	653b      	str	r3, [r7, #80]	; 0x50
 80046bc:	4613      	mov	r3, r2
 80046be:	eb42 0303 	adc.w	r3, r2, r3
 80046c2:	657b      	str	r3, [r7, #84]	; 0x54
 80046c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046cc:	f7fc fa66 	bl	8000b9c <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4b61      	ldr	r3, [pc, #388]	; (800485c <UART_SetConfig+0x2d4>)
 80046d6:	fba3 2302 	umull	r2, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	011c      	lsls	r4, r3, #4
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046f8:	415b      	adcs	r3, r3
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004700:	4641      	mov	r1, r8
 8004702:	eb12 0a01 	adds.w	sl, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb43 0b01 	adc.w	fp, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800471c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004720:	4692      	mov	sl, r2
 8004722:	469b      	mov	fp, r3
 8004724:	4643      	mov	r3, r8
 8004726:	eb1a 0303 	adds.w	r3, sl, r3
 800472a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800472e:	464b      	mov	r3, r9
 8004730:	eb4b 0303 	adc.w	r3, fp, r3
 8004734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800474c:	460b      	mov	r3, r1
 800474e:	18db      	adds	r3, r3, r3
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
 8004752:	4613      	mov	r3, r2
 8004754:	eb42 0303 	adc.w	r3, r2, r3
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
 800475a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800475e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004762:	f7fc fa1b 	bl	8000b9c <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4611      	mov	r1, r2
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <UART_SetConfig+0x2d4>)
 800476e:	fba3 2301 	umull	r2, r3, r3, r1
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	2264      	movs	r2, #100	; 0x64
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	1acb      	subs	r3, r1, r3
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <UART_SetConfig+0x2d4>)
 8004784:	fba3 2302 	umull	r2, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004790:	441c      	add	r4, r3
 8004792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800479c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80047ac:	415b      	adcs	r3, r3
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047b4:	4641      	mov	r1, r8
 80047b6:	1851      	adds	r1, r2, r1
 80047b8:	6339      	str	r1, [r7, #48]	; 0x30
 80047ba:	4649      	mov	r1, r9
 80047bc:	414b      	adcs	r3, r1
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047cc:	4659      	mov	r1, fp
 80047ce:	00cb      	lsls	r3, r1, #3
 80047d0:	4651      	mov	r1, sl
 80047d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d6:	4651      	mov	r1, sl
 80047d8:	00ca      	lsls	r2, r1, #3
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	4642      	mov	r2, r8
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e8:	464b      	mov	r3, r9
 80047ea:	460a      	mov	r2, r1
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004808:	460b      	mov	r3, r1
 800480a:	18db      	adds	r3, r3, r3
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 800480e:	4613      	mov	r3, r2
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800481a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800481e:	f7fc f9bd 	bl	8000b9c <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <UART_SetConfig+0x2d4>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	2164      	movs	r1, #100	; 0x64
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	3332      	adds	r3, #50	; 0x32
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <UART_SetConfig+0x2d4>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f003 0207 	and.w	r2, r3, #7
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4422      	add	r2, r4
 800484e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004850:	e106      	b.n	8004a60 <UART_SetConfig+0x4d8>
 8004852:	bf00      	nop
 8004854:	40011000 	.word	0x40011000
 8004858:	40011400 	.word	0x40011400
 800485c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800486a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800486e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004872:	4642      	mov	r2, r8
 8004874:	464b      	mov	r3, r9
 8004876:	1891      	adds	r1, r2, r2
 8004878:	6239      	str	r1, [r7, #32]
 800487a:	415b      	adcs	r3, r3
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004882:	4641      	mov	r1, r8
 8004884:	1854      	adds	r4, r2, r1
 8004886:	4649      	mov	r1, r9
 8004888:	eb43 0501 	adc.w	r5, r3, r1
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	00eb      	lsls	r3, r5, #3
 8004896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489a:	00e2      	lsls	r2, r4, #3
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	4643      	mov	r3, r8
 80048a2:	18e3      	adds	r3, r4, r3
 80048a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048a8:	464b      	mov	r3, r9
 80048aa:	eb45 0303 	adc.w	r3, r5, r3
 80048ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ce:	4629      	mov	r1, r5
 80048d0:	008b      	lsls	r3, r1, #2
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d8:	4621      	mov	r1, r4
 80048da:	008a      	lsls	r2, r1, #2
 80048dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048e0:	f7fc f95c 	bl	8000b9c <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4b60      	ldr	r3, [pc, #384]	; (8004a6c <UART_SetConfig+0x4e4>)
 80048ea:	fba3 2302 	umull	r2, r3, r3, r2
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	011c      	lsls	r4, r3, #4
 80048f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004904:	4642      	mov	r2, r8
 8004906:	464b      	mov	r3, r9
 8004908:	1891      	adds	r1, r2, r2
 800490a:	61b9      	str	r1, [r7, #24]
 800490c:	415b      	adcs	r3, r3
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004914:	4641      	mov	r1, r8
 8004916:	1851      	adds	r1, r2, r1
 8004918:	6139      	str	r1, [r7, #16]
 800491a:	4649      	mov	r1, r9
 800491c:	414b      	adcs	r3, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800492c:	4659      	mov	r1, fp
 800492e:	00cb      	lsls	r3, r1, #3
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004936:	4651      	mov	r1, sl
 8004938:	00ca      	lsls	r2, r1, #3
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	4603      	mov	r3, r0
 8004940:	4642      	mov	r2, r8
 8004942:	189b      	adds	r3, r3, r2
 8004944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004948:	464b      	mov	r3, r9
 800494a:	460a      	mov	r2, r1
 800494c:	eb42 0303 	adc.w	r3, r2, r3
 8004950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	67bb      	str	r3, [r7, #120]	; 0x78
 800495e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800496c:	4649      	mov	r1, r9
 800496e:	008b      	lsls	r3, r1, #2
 8004970:	4641      	mov	r1, r8
 8004972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004976:	4641      	mov	r1, r8
 8004978:	008a      	lsls	r2, r1, #2
 800497a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800497e:	f7fc f90d 	bl	8000b9c <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4611      	mov	r1, r2
 8004988:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <UART_SetConfig+0x4e4>)
 800498a:	fba3 2301 	umull	r2, r3, r3, r1
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2264      	movs	r2, #100	; 0x64
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	1acb      	subs	r3, r1, r3
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	3332      	adds	r3, #50	; 0x32
 800499c:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <UART_SetConfig+0x4e4>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a8:	441c      	add	r4, r3
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ae:	2200      	movs	r2, #0
 80049b0:	673b      	str	r3, [r7, #112]	; 0x70
 80049b2:	677a      	str	r2, [r7, #116]	; 0x74
 80049b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	415b      	adcs	r3, r3
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c8:	4641      	mov	r1, r8
 80049ca:	1851      	adds	r1, r2, r1
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	4649      	mov	r1, r9
 80049d0:	414b      	adcs	r3, r1
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049e0:	4659      	mov	r1, fp
 80049e2:	00cb      	lsls	r3, r1, #3
 80049e4:	4651      	mov	r1, sl
 80049e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ea:	4651      	mov	r1, sl
 80049ec:	00ca      	lsls	r2, r1, #3
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	4642      	mov	r2, r8
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fa:	464b      	mov	r3, r9
 80049fc:	460a      	mov	r2, r1
 80049fe:	eb42 0303 	adc.w	r3, r2, r3
 8004a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	008b      	lsls	r3, r1, #2
 8004a20:	4641      	mov	r1, r8
 8004a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a26:	4641      	mov	r1, r8
 8004a28:	008a      	lsls	r2, r1, #2
 8004a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a2e:	f7fc f8b5 	bl	8000b9c <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <UART_SetConfig+0x4e4>)
 8004a38:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	3332      	adds	r3, #50	; 0x32
 8004a4a:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <UART_SetConfig+0x4e4>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 020f 	and.w	r2, r3, #15
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4422      	add	r2, r4
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6c:	51eb851f 	.word	0x51eb851f

08004a70 <siprintf>:
 8004a70:	b40e      	push	{r1, r2, r3}
 8004a72:	b500      	push	{lr}
 8004a74:	b09c      	sub	sp, #112	; 0x70
 8004a76:	ab1d      	add	r3, sp, #116	; 0x74
 8004a78:	9002      	str	r0, [sp, #8]
 8004a7a:	9006      	str	r0, [sp, #24]
 8004a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a80:	4809      	ldr	r0, [pc, #36]	; (8004aa8 <siprintf+0x38>)
 8004a82:	9107      	str	r1, [sp, #28]
 8004a84:	9104      	str	r1, [sp, #16]
 8004a86:	4909      	ldr	r1, [pc, #36]	; (8004aac <siprintf+0x3c>)
 8004a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a8c:	9105      	str	r1, [sp, #20]
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	a902      	add	r1, sp, #8
 8004a94:	f000 f89a 	bl	8004bcc <_svfiprintf_r>
 8004a98:	9b02      	ldr	r3, [sp, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	b01c      	add	sp, #112	; 0x70
 8004aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa4:	b003      	add	sp, #12
 8004aa6:	4770      	bx	lr
 8004aa8:	20000058 	.word	0x20000058
 8004aac:	ffff0208 	.word	0xffff0208

08004ab0 <memset>:
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <__errno>:
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <__errno+0x8>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000058 	.word	0x20000058

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4d0d      	ldr	r5, [pc, #52]	; (8004b04 <__libc_init_array+0x38>)
 8004ad0:	4c0d      	ldr	r4, [pc, #52]	; (8004b08 <__libc_init_array+0x3c>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	42a6      	cmp	r6, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	4d0b      	ldr	r5, [pc, #44]	; (8004b0c <__libc_init_array+0x40>)
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <__libc_init_array+0x44>)
 8004ae0:	f000 fc6a 	bl	80053b8 <_init>
 8004ae4:	1b64      	subs	r4, r4, r5
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	2600      	movs	r6, #0
 8004aea:	42a6      	cmp	r6, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af4:	4798      	blx	r3
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afe:	4798      	blx	r3
 8004b00:	3601      	adds	r6, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	08005458 	.word	0x08005458
 8004b08:	08005458 	.word	0x08005458
 8004b0c:	08005458 	.word	0x08005458
 8004b10:	0800545c 	.word	0x0800545c

08004b14 <__retarget_lock_acquire_recursive>:
 8004b14:	4770      	bx	lr

08004b16 <__retarget_lock_release_recursive>:
 8004b16:	4770      	bx	lr

08004b18 <__ssputs_r>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	688e      	ldr	r6, [r1, #8]
 8004b1e:	461f      	mov	r7, r3
 8004b20:	42be      	cmp	r6, r7
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	4682      	mov	sl, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	4690      	mov	r8, r2
 8004b2a:	d82c      	bhi.n	8004b86 <__ssputs_r+0x6e>
 8004b2c:	898a      	ldrh	r2, [r1, #12]
 8004b2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b32:	d026      	beq.n	8004b82 <__ssputs_r+0x6a>
 8004b34:	6965      	ldr	r5, [r4, #20]
 8004b36:	6909      	ldr	r1, [r1, #16]
 8004b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b3c:	eba3 0901 	sub.w	r9, r3, r1
 8004b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b44:	1c7b      	adds	r3, r7, #1
 8004b46:	444b      	add	r3, r9
 8004b48:	106d      	asrs	r5, r5, #1
 8004b4a:	429d      	cmp	r5, r3
 8004b4c:	bf38      	it	cc
 8004b4e:	461d      	movcc	r5, r3
 8004b50:	0553      	lsls	r3, r2, #21
 8004b52:	d527      	bpl.n	8004ba4 <__ssputs_r+0x8c>
 8004b54:	4629      	mov	r1, r5
 8004b56:	f000 f957 	bl	8004e08 <_malloc_r>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	b360      	cbz	r0, 8004bb8 <__ssputs_r+0xa0>
 8004b5e:	6921      	ldr	r1, [r4, #16]
 8004b60:	464a      	mov	r2, r9
 8004b62:	f000 fbc7 	bl	80052f4 <memcpy>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	6126      	str	r6, [r4, #16]
 8004b74:	6165      	str	r5, [r4, #20]
 8004b76:	444e      	add	r6, r9
 8004b78:	eba5 0509 	sub.w	r5, r5, r9
 8004b7c:	6026      	str	r6, [r4, #0]
 8004b7e:	60a5      	str	r5, [r4, #8]
 8004b80:	463e      	mov	r6, r7
 8004b82:	42be      	cmp	r6, r7
 8004b84:	d900      	bls.n	8004b88 <__ssputs_r+0x70>
 8004b86:	463e      	mov	r6, r7
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	f000 fb86 	bl	800529e <memmove>
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	60a3      	str	r3, [r4, #8]
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	4433      	add	r3, r6
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	f000 fb4b 	bl	8005240 <_realloc_r>
 8004baa:	4606      	mov	r6, r0
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d1e0      	bne.n	8004b72 <__ssputs_r+0x5a>
 8004bb0:	6921      	ldr	r1, [r4, #16]
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	f000 fbac 	bl	8005310 <_free_r>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	f8ca 3000 	str.w	r3, [sl]
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bca:	e7e9      	b.n	8004ba0 <__ssputs_r+0x88>

08004bcc <_svfiprintf_r>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	4698      	mov	r8, r3
 8004bd2:	898b      	ldrh	r3, [r1, #12]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	b09d      	sub	sp, #116	; 0x74
 8004bd8:	4607      	mov	r7, r0
 8004bda:	460d      	mov	r5, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	d50e      	bpl.n	8004bfe <_svfiprintf_r+0x32>
 8004be0:	690b      	ldr	r3, [r1, #16]
 8004be2:	b963      	cbnz	r3, 8004bfe <_svfiprintf_r+0x32>
 8004be4:	2140      	movs	r1, #64	; 0x40
 8004be6:	f000 f90f 	bl	8004e08 <_malloc_r>
 8004bea:	6028      	str	r0, [r5, #0]
 8004bec:	6128      	str	r0, [r5, #16]
 8004bee:	b920      	cbnz	r0, 8004bfa <_svfiprintf_r+0x2e>
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf8:	e0d0      	b.n	8004d9c <_svfiprintf_r+0x1d0>
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	616b      	str	r3, [r5, #20]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9309      	str	r3, [sp, #36]	; 0x24
 8004c02:	2320      	movs	r3, #32
 8004c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c0c:	2330      	movs	r3, #48	; 0x30
 8004c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004db4 <_svfiprintf_r+0x1e8>
 8004c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c16:	f04f 0901 	mov.w	r9, #1
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	469a      	mov	sl, r3
 8004c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c22:	b10a      	cbz	r2, 8004c28 <_svfiprintf_r+0x5c>
 8004c24:	2a25      	cmp	r2, #37	; 0x25
 8004c26:	d1f9      	bne.n	8004c1c <_svfiprintf_r+0x50>
 8004c28:	ebba 0b04 	subs.w	fp, sl, r4
 8004c2c:	d00b      	beq.n	8004c46 <_svfiprintf_r+0x7a>
 8004c2e:	465b      	mov	r3, fp
 8004c30:	4622      	mov	r2, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	4638      	mov	r0, r7
 8004c36:	f7ff ff6f 	bl	8004b18 <__ssputs_r>
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f000 80a9 	beq.w	8004d92 <_svfiprintf_r+0x1c6>
 8004c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c42:	445a      	add	r2, fp
 8004c44:	9209      	str	r2, [sp, #36]	; 0x24
 8004c46:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80a1 	beq.w	8004d92 <_svfiprintf_r+0x1c6>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c5a:	f10a 0a01 	add.w	sl, sl, #1
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	9307      	str	r3, [sp, #28]
 8004c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c66:	931a      	str	r3, [sp, #104]	; 0x68
 8004c68:	4654      	mov	r4, sl
 8004c6a:	2205      	movs	r2, #5
 8004c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c70:	4850      	ldr	r0, [pc, #320]	; (8004db4 <_svfiprintf_r+0x1e8>)
 8004c72:	f7fb fad5 	bl	8000220 <memchr>
 8004c76:	9a04      	ldr	r2, [sp, #16]
 8004c78:	b9d8      	cbnz	r0, 8004cb2 <_svfiprintf_r+0xe6>
 8004c7a:	06d0      	lsls	r0, r2, #27
 8004c7c:	bf44      	itt	mi
 8004c7e:	2320      	movmi	r3, #32
 8004c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c84:	0711      	lsls	r1, r2, #28
 8004c86:	bf44      	itt	mi
 8004c88:	232b      	movmi	r3, #43	; 0x2b
 8004c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c92:	2b2a      	cmp	r3, #42	; 0x2a
 8004c94:	d015      	beq.n	8004cc2 <_svfiprintf_r+0xf6>
 8004c96:	9a07      	ldr	r2, [sp, #28]
 8004c98:	4654      	mov	r4, sl
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f04f 0c0a 	mov.w	ip, #10
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca6:	3b30      	subs	r3, #48	; 0x30
 8004ca8:	2b09      	cmp	r3, #9
 8004caa:	d94d      	bls.n	8004d48 <_svfiprintf_r+0x17c>
 8004cac:	b1b0      	cbz	r0, 8004cdc <_svfiprintf_r+0x110>
 8004cae:	9207      	str	r2, [sp, #28]
 8004cb0:	e014      	b.n	8004cdc <_svfiprintf_r+0x110>
 8004cb2:	eba0 0308 	sub.w	r3, r0, r8
 8004cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	46a2      	mov	sl, r4
 8004cc0:	e7d2      	b.n	8004c68 <_svfiprintf_r+0x9c>
 8004cc2:	9b03      	ldr	r3, [sp, #12]
 8004cc4:	1d19      	adds	r1, r3, #4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	9103      	str	r1, [sp, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bfbb      	ittet	lt
 8004cce:	425b      	neglt	r3, r3
 8004cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd4:	9307      	strge	r3, [sp, #28]
 8004cd6:	9307      	strlt	r3, [sp, #28]
 8004cd8:	bfb8      	it	lt
 8004cda:	9204      	strlt	r2, [sp, #16]
 8004cdc:	7823      	ldrb	r3, [r4, #0]
 8004cde:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce0:	d10c      	bne.n	8004cfc <_svfiprintf_r+0x130>
 8004ce2:	7863      	ldrb	r3, [r4, #1]
 8004ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce6:	d134      	bne.n	8004d52 <_svfiprintf_r+0x186>
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	9203      	str	r2, [sp, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bfb8      	it	lt
 8004cf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004cf8:	3402      	adds	r4, #2
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004dc4 <_svfiprintf_r+0x1f8>
 8004d00:	7821      	ldrb	r1, [r4, #0]
 8004d02:	2203      	movs	r2, #3
 8004d04:	4650      	mov	r0, sl
 8004d06:	f7fb fa8b 	bl	8000220 <memchr>
 8004d0a:	b138      	cbz	r0, 8004d1c <_svfiprintf_r+0x150>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	eba0 000a 	sub.w	r0, r0, sl
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	4082      	lsls	r2, r0
 8004d16:	4313      	orrs	r3, r2
 8004d18:	3401      	adds	r4, #1
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	4825      	ldr	r0, [pc, #148]	; (8004db8 <_svfiprintf_r+0x1ec>)
 8004d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d26:	2206      	movs	r2, #6
 8004d28:	f7fb fa7a 	bl	8000220 <memchr>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d038      	beq.n	8004da2 <_svfiprintf_r+0x1d6>
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <_svfiprintf_r+0x1f0>)
 8004d32:	bb1b      	cbnz	r3, 8004d7c <_svfiprintf_r+0x1b0>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	3307      	adds	r3, #7
 8004d38:	f023 0307 	bic.w	r3, r3, #7
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	9303      	str	r3, [sp, #12]
 8004d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d42:	4433      	add	r3, r6
 8004d44:	9309      	str	r3, [sp, #36]	; 0x24
 8004d46:	e768      	b.n	8004c1a <_svfiprintf_r+0x4e>
 8004d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e7a6      	b.n	8004ca0 <_svfiprintf_r+0xd4>
 8004d52:	2300      	movs	r3, #0
 8004d54:	3401      	adds	r4, #1
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f04f 0c0a 	mov.w	ip, #10
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d64:	3a30      	subs	r2, #48	; 0x30
 8004d66:	2a09      	cmp	r2, #9
 8004d68:	d903      	bls.n	8004d72 <_svfiprintf_r+0x1a6>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0c6      	beq.n	8004cfc <_svfiprintf_r+0x130>
 8004d6e:	9105      	str	r1, [sp, #20]
 8004d70:	e7c4      	b.n	8004cfc <_svfiprintf_r+0x130>
 8004d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d76:	4604      	mov	r4, r0
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e7f0      	b.n	8004d5e <_svfiprintf_r+0x192>
 8004d7c:	ab03      	add	r3, sp, #12
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	462a      	mov	r2, r5
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <_svfiprintf_r+0x1f4>)
 8004d84:	a904      	add	r1, sp, #16
 8004d86:	4638      	mov	r0, r7
 8004d88:	f3af 8000 	nop.w
 8004d8c:	1c42      	adds	r2, r0, #1
 8004d8e:	4606      	mov	r6, r0
 8004d90:	d1d6      	bne.n	8004d40 <_svfiprintf_r+0x174>
 8004d92:	89ab      	ldrh	r3, [r5, #12]
 8004d94:	065b      	lsls	r3, r3, #25
 8004d96:	f53f af2d 	bmi.w	8004bf4 <_svfiprintf_r+0x28>
 8004d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d9c:	b01d      	add	sp, #116	; 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	ab03      	add	r3, sp, #12
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462a      	mov	r2, r5
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <_svfiprintf_r+0x1f4>)
 8004daa:	a904      	add	r1, sp, #16
 8004dac:	4638      	mov	r0, r7
 8004dae:	f000 f919 	bl	8004fe4 <_printf_i>
 8004db2:	e7eb      	b.n	8004d8c <_svfiprintf_r+0x1c0>
 8004db4:	0800541c 	.word	0x0800541c
 8004db8:	08005426 	.word	0x08005426
 8004dbc:	00000000 	.word	0x00000000
 8004dc0:	08004b19 	.word	0x08004b19
 8004dc4:	08005422 	.word	0x08005422

08004dc8 <sbrk_aligned>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	4e0e      	ldr	r6, [pc, #56]	; (8004e04 <sbrk_aligned+0x3c>)
 8004dcc:	460c      	mov	r4, r1
 8004dce:	6831      	ldr	r1, [r6, #0]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	b911      	cbnz	r1, 8004dda <sbrk_aligned+0x12>
 8004dd4:	f000 fa7e 	bl	80052d4 <_sbrk_r>
 8004dd8:	6030      	str	r0, [r6, #0]
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 fa79 	bl	80052d4 <_sbrk_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	d00a      	beq.n	8004dfc <sbrk_aligned+0x34>
 8004de6:	1cc4      	adds	r4, r0, #3
 8004de8:	f024 0403 	bic.w	r4, r4, #3
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d007      	beq.n	8004e00 <sbrk_aligned+0x38>
 8004df0:	1a21      	subs	r1, r4, r0
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 fa6e 	bl	80052d4 <_sbrk_r>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d101      	bne.n	8004e00 <sbrk_aligned+0x38>
 8004dfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e00:	4620      	mov	r0, r4
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	2000029c 	.word	0x2000029c

08004e08 <_malloc_r>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	1ccd      	adds	r5, r1, #3
 8004e0e:	f025 0503 	bic.w	r5, r5, #3
 8004e12:	3508      	adds	r5, #8
 8004e14:	2d0c      	cmp	r5, #12
 8004e16:	bf38      	it	cc
 8004e18:	250c      	movcc	r5, #12
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	db01      	blt.n	8004e24 <_malloc_r+0x1c>
 8004e20:	42a9      	cmp	r1, r5
 8004e22:	d905      	bls.n	8004e30 <_malloc_r+0x28>
 8004e24:	230c      	movs	r3, #12
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	2600      	movs	r6, #0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f04 <_malloc_r+0xfc>
 8004e34:	f000 f9f8 	bl	8005228 <__malloc_lock>
 8004e38:	f8d8 3000 	ldr.w	r3, [r8]
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	bb5c      	cbnz	r4, 8004e98 <_malloc_r+0x90>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ffc0 	bl	8004dc8 <sbrk_aligned>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	d155      	bne.n	8004efa <_malloc_r+0xf2>
 8004e4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e52:	4626      	mov	r6, r4
 8004e54:	2e00      	cmp	r6, #0
 8004e56:	d145      	bne.n	8004ee4 <_malloc_r+0xdc>
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d048      	beq.n	8004eee <_malloc_r+0xe6>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	eb04 0903 	add.w	r9, r4, r3
 8004e66:	f000 fa35 	bl	80052d4 <_sbrk_r>
 8004e6a:	4581      	cmp	r9, r0
 8004e6c:	d13f      	bne.n	8004eee <_malloc_r+0xe6>
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	1a6d      	subs	r5, r5, r1
 8004e72:	4629      	mov	r1, r5
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff ffa7 	bl	8004dc8 <sbrk_aligned>
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d037      	beq.n	8004eee <_malloc_r+0xe6>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	442b      	add	r3, r5
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	f8d8 3000 	ldr.w	r3, [r8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d038      	beq.n	8004efe <_malloc_r+0xf6>
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	42a2      	cmp	r2, r4
 8004e90:	d12b      	bne.n	8004eea <_malloc_r+0xe2>
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	e00f      	b.n	8004eb8 <_malloc_r+0xb0>
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	1b52      	subs	r2, r2, r5
 8004e9c:	d41f      	bmi.n	8004ede <_malloc_r+0xd6>
 8004e9e:	2a0b      	cmp	r2, #11
 8004ea0:	d917      	bls.n	8004ed2 <_malloc_r+0xca>
 8004ea2:	1961      	adds	r1, r4, r5
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	bf18      	it	ne
 8004eaa:	6059      	strne	r1, [r3, #4]
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	bf08      	it	eq
 8004eb0:	f8c8 1000 	streq.w	r1, [r8]
 8004eb4:	5162      	str	r2, [r4, r5]
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f104 060b 	add.w	r6, r4, #11
 8004ebe:	f000 f9b9 	bl	8005234 <__malloc_unlock>
 8004ec2:	f026 0607 	bic.w	r6, r6, #7
 8004ec6:	1d23      	adds	r3, r4, #4
 8004ec8:	1af2      	subs	r2, r6, r3
 8004eca:	d0ae      	beq.n	8004e2a <_malloc_r+0x22>
 8004ecc:	1b9b      	subs	r3, r3, r6
 8004ece:	50a3      	str	r3, [r4, r2]
 8004ed0:	e7ab      	b.n	8004e2a <_malloc_r+0x22>
 8004ed2:	42a3      	cmp	r3, r4
 8004ed4:	6862      	ldr	r2, [r4, #4]
 8004ed6:	d1dd      	bne.n	8004e94 <_malloc_r+0x8c>
 8004ed8:	f8c8 2000 	str.w	r2, [r8]
 8004edc:	e7ec      	b.n	8004eb8 <_malloc_r+0xb0>
 8004ede:	4623      	mov	r3, r4
 8004ee0:	6864      	ldr	r4, [r4, #4]
 8004ee2:	e7ac      	b.n	8004e3e <_malloc_r+0x36>
 8004ee4:	4634      	mov	r4, r6
 8004ee6:	6876      	ldr	r6, [r6, #4]
 8004ee8:	e7b4      	b.n	8004e54 <_malloc_r+0x4c>
 8004eea:	4613      	mov	r3, r2
 8004eec:	e7cc      	b.n	8004e88 <_malloc_r+0x80>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f000 f99e 	bl	8005234 <__malloc_unlock>
 8004ef8:	e797      	b.n	8004e2a <_malloc_r+0x22>
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	e7dc      	b.n	8004eb8 <_malloc_r+0xb0>
 8004efe:	605b      	str	r3, [r3, #4]
 8004f00:	deff      	udf	#255	; 0xff
 8004f02:	bf00      	nop
 8004f04:	20000298 	.word	0x20000298

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	4699      	mov	r9, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bfb8      	it	lt
 8004f1c:	4613      	movlt	r3, r2
 8004f1e:	6033      	str	r3, [r6, #0]
 8004f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f24:	4607      	mov	r7, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	b10a      	cbz	r2, 8004f2e <_printf_common+0x26>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	6833      	ldrmi	r3, [r6, #0]
 8004f36:	3302      	addmi	r3, #2
 8004f38:	6033      	strmi	r3, [r6, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d106      	bne.n	8004f50 <_printf_common+0x48>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	6832      	ldr	r2, [r6, #0]
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dc26      	bgt.n	8004f9e <_printf_common+0x96>
 8004f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f54:	1e13      	subs	r3, r2, #0
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d42b      	bmi.n	8004fb8 <_printf_common+0xb0>
 8004f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d01e      	beq.n	8004fac <_printf_common+0xa4>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf02      	ittt	eq
 8004f7a:	68e5      	ldreq	r5, [r4, #12]
 8004f7c:	6833      	ldreq	r3, [r6, #0]
 8004f7e:	1aed      	subeq	r5, r5, r3
 8004f80:	68a3      	ldr	r3, [r4, #8]
 8004f82:	bf0c      	ite	eq
 8004f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f88:	2500      	movne	r5, #0
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bfc4      	itt	gt
 8004f8e:	1a9b      	subgt	r3, r3, r2
 8004f90:	18ed      	addgt	r5, r5, r3
 8004f92:	2600      	movs	r6, #0
 8004f94:	341a      	adds	r4, #26
 8004f96:	42b5      	cmp	r5, r6
 8004f98:	d11a      	bne.n	8004fd0 <_printf_common+0xc8>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e008      	b.n	8004fb0 <_printf_common+0xa8>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4652      	mov	r2, sl
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d103      	bne.n	8004fb4 <_printf_common+0xac>
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	e7c6      	b.n	8004f46 <_printf_common+0x3e>
 8004fb8:	18e1      	adds	r1, r4, r3
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	2030      	movs	r0, #48	; 0x30
 8004fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc2:	4422      	add	r2, r4
 8004fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fcc:	3302      	adds	r3, #2
 8004fce:	e7c7      	b.n	8004f60 <_printf_common+0x58>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d0e6      	beq.n	8004fac <_printf_common+0xa4>
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7d9      	b.n	8004f96 <_printf_common+0x8e>
	...

08004fe4 <_printf_i>:
 8004fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	7e0f      	ldrb	r7, [r1, #24]
 8004fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fec:	2f78      	cmp	r7, #120	; 0x78
 8004fee:	4691      	mov	r9, r2
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	469a      	mov	sl, r3
 8004ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ffa:	d807      	bhi.n	800500c <_printf_i+0x28>
 8004ffc:	2f62      	cmp	r7, #98	; 0x62
 8004ffe:	d80a      	bhi.n	8005016 <_printf_i+0x32>
 8005000:	2f00      	cmp	r7, #0
 8005002:	f000 80d4 	beq.w	80051ae <_printf_i+0x1ca>
 8005006:	2f58      	cmp	r7, #88	; 0x58
 8005008:	f000 80c0 	beq.w	800518c <_printf_i+0x1a8>
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005014:	e03a      	b.n	800508c <_printf_i+0xa8>
 8005016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501a:	2b15      	cmp	r3, #21
 800501c:	d8f6      	bhi.n	800500c <_printf_i+0x28>
 800501e:	a101      	add	r1, pc, #4	; (adr r1, 8005024 <_printf_i+0x40>)
 8005020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005091 	.word	0x08005091
 800502c:	0800500d 	.word	0x0800500d
 8005030:	0800500d 	.word	0x0800500d
 8005034:	0800500d 	.word	0x0800500d
 8005038:	0800500d 	.word	0x0800500d
 800503c:	08005091 	.word	0x08005091
 8005040:	0800500d 	.word	0x0800500d
 8005044:	0800500d 	.word	0x0800500d
 8005048:	0800500d 	.word	0x0800500d
 800504c:	0800500d 	.word	0x0800500d
 8005050:	08005195 	.word	0x08005195
 8005054:	080050bd 	.word	0x080050bd
 8005058:	0800514f 	.word	0x0800514f
 800505c:	0800500d 	.word	0x0800500d
 8005060:	0800500d 	.word	0x0800500d
 8005064:	080051b7 	.word	0x080051b7
 8005068:	0800500d 	.word	0x0800500d
 800506c:	080050bd 	.word	0x080050bd
 8005070:	0800500d 	.word	0x0800500d
 8005074:	0800500d 	.word	0x0800500d
 8005078:	08005157 	.word	0x08005157
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	602a      	str	r2, [r5, #0]
 8005084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800508c:	2301      	movs	r3, #1
 800508e:	e09f      	b.n	80051d0 <_printf_i+0x1ec>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	682b      	ldr	r3, [r5, #0]
 8005094:	0607      	lsls	r7, r0, #24
 8005096:	f103 0104 	add.w	r1, r3, #4
 800509a:	6029      	str	r1, [r5, #0]
 800509c:	d501      	bpl.n	80050a2 <_printf_i+0xbe>
 800509e:	681e      	ldr	r6, [r3, #0]
 80050a0:	e003      	b.n	80050aa <_printf_i+0xc6>
 80050a2:	0646      	lsls	r6, r0, #25
 80050a4:	d5fb      	bpl.n	800509e <_printf_i+0xba>
 80050a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	da03      	bge.n	80050b6 <_printf_i+0xd2>
 80050ae:	232d      	movs	r3, #45	; 0x2d
 80050b0:	4276      	negs	r6, r6
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b6:	485a      	ldr	r0, [pc, #360]	; (8005220 <_printf_i+0x23c>)
 80050b8:	230a      	movs	r3, #10
 80050ba:	e012      	b.n	80050e2 <_printf_i+0xfe>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	6029      	str	r1, [r5, #0]
 80050c4:	0605      	lsls	r5, r0, #24
 80050c6:	d501      	bpl.n	80050cc <_printf_i+0xe8>
 80050c8:	681e      	ldr	r6, [r3, #0]
 80050ca:	e002      	b.n	80050d2 <_printf_i+0xee>
 80050cc:	0641      	lsls	r1, r0, #25
 80050ce:	d5fb      	bpl.n	80050c8 <_printf_i+0xe4>
 80050d0:	881e      	ldrh	r6, [r3, #0]
 80050d2:	4853      	ldr	r0, [pc, #332]	; (8005220 <_printf_i+0x23c>)
 80050d4:	2f6f      	cmp	r7, #111	; 0x6f
 80050d6:	bf0c      	ite	eq
 80050d8:	2308      	moveq	r3, #8
 80050da:	230a      	movne	r3, #10
 80050dc:	2100      	movs	r1, #0
 80050de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050e2:	6865      	ldr	r5, [r4, #4]
 80050e4:	60a5      	str	r5, [r4, #8]
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	bfa2      	ittt	ge
 80050ea:	6821      	ldrge	r1, [r4, #0]
 80050ec:	f021 0104 	bicge.w	r1, r1, #4
 80050f0:	6021      	strge	r1, [r4, #0]
 80050f2:	b90e      	cbnz	r6, 80050f8 <_printf_i+0x114>
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	d04b      	beq.n	8005190 <_printf_i+0x1ac>
 80050f8:	4615      	mov	r5, r2
 80050fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80050fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005102:	5dc7      	ldrb	r7, [r0, r7]
 8005104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005108:	4637      	mov	r7, r6
 800510a:	42bb      	cmp	r3, r7
 800510c:	460e      	mov	r6, r1
 800510e:	d9f4      	bls.n	80050fa <_printf_i+0x116>
 8005110:	2b08      	cmp	r3, #8
 8005112:	d10b      	bne.n	800512c <_printf_i+0x148>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	07de      	lsls	r6, r3, #31
 8005118:	d508      	bpl.n	800512c <_printf_i+0x148>
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	6861      	ldr	r1, [r4, #4]
 800511e:	4299      	cmp	r1, r3
 8005120:	bfde      	ittt	le
 8005122:	2330      	movle	r3, #48	; 0x30
 8005124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005128:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800512c:	1b52      	subs	r2, r2, r5
 800512e:	6122      	str	r2, [r4, #16]
 8005130:	f8cd a000 	str.w	sl, [sp]
 8005134:	464b      	mov	r3, r9
 8005136:	aa03      	add	r2, sp, #12
 8005138:	4621      	mov	r1, r4
 800513a:	4640      	mov	r0, r8
 800513c:	f7ff fee4 	bl	8004f08 <_printf_common>
 8005140:	3001      	adds	r0, #1
 8005142:	d14a      	bne.n	80051da <_printf_i+0x1f6>
 8005144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005148:	b004      	add	sp, #16
 800514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f043 0320 	orr.w	r3, r3, #32
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	4833      	ldr	r0, [pc, #204]	; (8005224 <_printf_i+0x240>)
 8005158:	2778      	movs	r7, #120	; 0x78
 800515a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6829      	ldr	r1, [r5, #0]
 8005162:	061f      	lsls	r7, r3, #24
 8005164:	f851 6b04 	ldr.w	r6, [r1], #4
 8005168:	d402      	bmi.n	8005170 <_printf_i+0x18c>
 800516a:	065f      	lsls	r7, r3, #25
 800516c:	bf48      	it	mi
 800516e:	b2b6      	uxthmi	r6, r6
 8005170:	07df      	lsls	r7, r3, #31
 8005172:	bf48      	it	mi
 8005174:	f043 0320 	orrmi.w	r3, r3, #32
 8005178:	6029      	str	r1, [r5, #0]
 800517a:	bf48      	it	mi
 800517c:	6023      	strmi	r3, [r4, #0]
 800517e:	b91e      	cbnz	r6, 8005188 <_printf_i+0x1a4>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	f023 0320 	bic.w	r3, r3, #32
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	2310      	movs	r3, #16
 800518a:	e7a7      	b.n	80050dc <_printf_i+0xf8>
 800518c:	4824      	ldr	r0, [pc, #144]	; (8005220 <_printf_i+0x23c>)
 800518e:	e7e4      	b.n	800515a <_printf_i+0x176>
 8005190:	4615      	mov	r5, r2
 8005192:	e7bd      	b.n	8005110 <_printf_i+0x12c>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	6826      	ldr	r6, [r4, #0]
 8005198:	6961      	ldr	r1, [r4, #20]
 800519a:	1d18      	adds	r0, r3, #4
 800519c:	6028      	str	r0, [r5, #0]
 800519e:	0635      	lsls	r5, r6, #24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	d501      	bpl.n	80051a8 <_printf_i+0x1c4>
 80051a4:	6019      	str	r1, [r3, #0]
 80051a6:	e002      	b.n	80051ae <_printf_i+0x1ca>
 80051a8:	0670      	lsls	r0, r6, #25
 80051aa:	d5fb      	bpl.n	80051a4 <_printf_i+0x1c0>
 80051ac:	8019      	strh	r1, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	4615      	mov	r5, r2
 80051b4:	e7bc      	b.n	8005130 <_printf_i+0x14c>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	602a      	str	r2, [r5, #0]
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	2100      	movs	r1, #0
 80051c2:	4628      	mov	r0, r5
 80051c4:	f7fb f82c 	bl	8000220 <memchr>
 80051c8:	b108      	cbz	r0, 80051ce <_printf_i+0x1ea>
 80051ca:	1b40      	subs	r0, r0, r5
 80051cc:	6060      	str	r0, [r4, #4]
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	6123      	str	r3, [r4, #16]
 80051d2:	2300      	movs	r3, #0
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d8:	e7aa      	b.n	8005130 <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	462a      	mov	r2, r5
 80051de:	4649      	mov	r1, r9
 80051e0:	4640      	mov	r0, r8
 80051e2:	47d0      	blx	sl
 80051e4:	3001      	adds	r0, #1
 80051e6:	d0ad      	beq.n	8005144 <_printf_i+0x160>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	079b      	lsls	r3, r3, #30
 80051ec:	d413      	bmi.n	8005216 <_printf_i+0x232>
 80051ee:	68e0      	ldr	r0, [r4, #12]
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	4298      	cmp	r0, r3
 80051f4:	bfb8      	it	lt
 80051f6:	4618      	movlt	r0, r3
 80051f8:	e7a6      	b.n	8005148 <_printf_i+0x164>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4632      	mov	r2, r6
 80051fe:	4649      	mov	r1, r9
 8005200:	4640      	mov	r0, r8
 8005202:	47d0      	blx	sl
 8005204:	3001      	adds	r0, #1
 8005206:	d09d      	beq.n	8005144 <_printf_i+0x160>
 8005208:	3501      	adds	r5, #1
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	9903      	ldr	r1, [sp, #12]
 800520e:	1a5b      	subs	r3, r3, r1
 8005210:	42ab      	cmp	r3, r5
 8005212:	dcf2      	bgt.n	80051fa <_printf_i+0x216>
 8005214:	e7eb      	b.n	80051ee <_printf_i+0x20a>
 8005216:	2500      	movs	r5, #0
 8005218:	f104 0619 	add.w	r6, r4, #25
 800521c:	e7f5      	b.n	800520a <_printf_i+0x226>
 800521e:	bf00      	nop
 8005220:	0800542d 	.word	0x0800542d
 8005224:	0800543e 	.word	0x0800543e

08005228 <__malloc_lock>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__malloc_lock+0x8>)
 800522a:	f7ff bc73 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20000294 	.word	0x20000294

08005234 <__malloc_unlock>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__malloc_unlock+0x8>)
 8005236:	f7ff bc6e 	b.w	8004b16 <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20000294 	.word	0x20000294

08005240 <_realloc_r>:
 8005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	4680      	mov	r8, r0
 8005246:	4614      	mov	r4, r2
 8005248:	460e      	mov	r6, r1
 800524a:	b921      	cbnz	r1, 8005256 <_realloc_r+0x16>
 800524c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4611      	mov	r1, r2
 8005252:	f7ff bdd9 	b.w	8004e08 <_malloc_r>
 8005256:	b92a      	cbnz	r2, 8005264 <_realloc_r+0x24>
 8005258:	f000 f85a 	bl	8005310 <_free_r>
 800525c:	4625      	mov	r5, r4
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	f000 f8a0 	bl	80053a8 <_malloc_usable_size_r>
 8005268:	4284      	cmp	r4, r0
 800526a:	4607      	mov	r7, r0
 800526c:	d802      	bhi.n	8005274 <_realloc_r+0x34>
 800526e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005272:	d812      	bhi.n	800529a <_realloc_r+0x5a>
 8005274:	4621      	mov	r1, r4
 8005276:	4640      	mov	r0, r8
 8005278:	f7ff fdc6 	bl	8004e08 <_malloc_r>
 800527c:	4605      	mov	r5, r0
 800527e:	2800      	cmp	r0, #0
 8005280:	d0ed      	beq.n	800525e <_realloc_r+0x1e>
 8005282:	42bc      	cmp	r4, r7
 8005284:	4622      	mov	r2, r4
 8005286:	4631      	mov	r1, r6
 8005288:	bf28      	it	cs
 800528a:	463a      	movcs	r2, r7
 800528c:	f000 f832 	bl	80052f4 <memcpy>
 8005290:	4631      	mov	r1, r6
 8005292:	4640      	mov	r0, r8
 8005294:	f000 f83c 	bl	8005310 <_free_r>
 8005298:	e7e1      	b.n	800525e <_realloc_r+0x1e>
 800529a:	4635      	mov	r5, r6
 800529c:	e7df      	b.n	800525e <_realloc_r+0x1e>

0800529e <memmove>:
 800529e:	4288      	cmp	r0, r1
 80052a0:	b510      	push	{r4, lr}
 80052a2:	eb01 0402 	add.w	r4, r1, r2
 80052a6:	d902      	bls.n	80052ae <memmove+0x10>
 80052a8:	4284      	cmp	r4, r0
 80052aa:	4623      	mov	r3, r4
 80052ac:	d807      	bhi.n	80052be <memmove+0x20>
 80052ae:	1e43      	subs	r3, r0, #1
 80052b0:	42a1      	cmp	r1, r4
 80052b2:	d008      	beq.n	80052c6 <memmove+0x28>
 80052b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052bc:	e7f8      	b.n	80052b0 <memmove+0x12>
 80052be:	4402      	add	r2, r0
 80052c0:	4601      	mov	r1, r0
 80052c2:	428a      	cmp	r2, r1
 80052c4:	d100      	bne.n	80052c8 <memmove+0x2a>
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052d0:	e7f7      	b.n	80052c2 <memmove+0x24>
	...

080052d4 <_sbrk_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	; (80052f0 <_sbrk_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fec0 	bl	8002064 <_sbrk>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_sbrk_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_sbrk_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200002a0 	.word	0x200002a0

080052f4 <memcpy>:
 80052f4:	440a      	add	r2, r1
 80052f6:	4291      	cmp	r1, r2
 80052f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052fc:	d100      	bne.n	8005300 <memcpy+0xc>
 80052fe:	4770      	bx	lr
 8005300:	b510      	push	{r4, lr}
 8005302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800530a:	4291      	cmp	r1, r2
 800530c:	d1f9      	bne.n	8005302 <memcpy+0xe>
 800530e:	bd10      	pop	{r4, pc}

08005310 <_free_r>:
 8005310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005312:	2900      	cmp	r1, #0
 8005314:	d044      	beq.n	80053a0 <_free_r+0x90>
 8005316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800531a:	9001      	str	r0, [sp, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f1a1 0404 	sub.w	r4, r1, #4
 8005322:	bfb8      	it	lt
 8005324:	18e4      	addlt	r4, r4, r3
 8005326:	f7ff ff7f 	bl	8005228 <__malloc_lock>
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <_free_r+0x94>)
 800532c:	9801      	ldr	r0, [sp, #4]
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	b933      	cbnz	r3, 8005340 <_free_r+0x30>
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	b003      	add	sp, #12
 8005338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800533c:	f7ff bf7a 	b.w	8005234 <__malloc_unlock>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x46>
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	1961      	adds	r1, r4, r5
 8005348:	428b      	cmp	r3, r1
 800534a:	bf01      	itttt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	e7ed      	b.n	8005332 <_free_r+0x22>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x50>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x46>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1855      	adds	r5, r2, r1
 8005364:	42a5      	cmp	r5, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x70>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	4421      	add	r1, r4
 800536c:	1854      	adds	r4, r2, r1
 800536e:	42a3      	cmp	r3, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1e0      	bne.n	8005336 <_free_r+0x26>
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	440c      	add	r4, r1
 800537c:	6014      	str	r4, [r2, #0]
 800537e:	e7da      	b.n	8005336 <_free_r+0x26>
 8005380:	d902      	bls.n	8005388 <_free_r+0x78>
 8005382:	230c      	movs	r3, #12
 8005384:	6003      	str	r3, [r0, #0]
 8005386:	e7d6      	b.n	8005336 <_free_r+0x26>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7ca      	b.n	8005336 <_free_r+0x26>
 80053a0:	b003      	add	sp, #12
 80053a2:	bd30      	pop	{r4, r5, pc}
 80053a4:	20000298 	.word	0x20000298

080053a8 <_malloc_usable_size_r>:
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f18      	subs	r0, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfbc      	itt	lt
 80053b2:	580b      	ldrlt	r3, [r1, r0]
 80053b4:	18c0      	addlt	r0, r0, r3
 80053b6:	4770      	bx	lr

080053b8 <_init>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr

080053c4 <_fini>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr
